#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
"""
import sys

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...", flush=True)
    
    modules_to_test = [
        ("core.memory_module", "MemoryModule"),
        ("core.goal_module", "GoalModule"),
        ("core.inner_state_module", "InnerStateModule"),
        ("core.world_model_module", "WorldModelModule"),
        ("core.thought_tree_module", "ThoughtTreeModule"),
        ("core.self_model_module", "SelfModelModule"),
        ("autonomous_agent", "AutonomousAgent")
    ]
    
    results = {}
    
    for module_name, class_name in modules_to_test:
        print(f"   –ò–º–ø–æ—Ä—Ç {module_name}...", end=" ", flush=True)
        try:
            module = __import__(module_name, fromlist=[class_name])
            getattr(module, class_name)
            print("‚úÖ OK")
            results[module_name] = True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            results[module_name] = False
    
    return results

def test_agent_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞...", flush=True)
    
    try:
        print("   –ò–º–ø–æ—Ä—Ç AutonomousAgent...", end=" ", flush=True)
        from autonomous_agent import AutonomousAgent
        print("‚úÖ OK")
        
        print("   –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...", end=" ", flush=True)
        agent = AutonomousAgent("–¢–µ—Å—Ç–æ–≤—ã–π –ê–≥–µ–Ω—Ç", "test_data")
        print("‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
        print("   –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞...", end=" ", flush=True)
        response = agent.process_input("–ü—Ä–∏–≤–µ—Ç!")
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response[:50]}...")
        
        print("   –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...", end=" ", flush=True)
        status = agent.get_status_report()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {status['agent_name']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_web_interface():
    """–¢–µ—Å—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...", flush=True)
    
    try:
        print("   –ò–º–ø–æ—Ä—Ç streamlit_app...", end=" ", flush=True)
        import streamlit_app
        print("‚úÖ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    import_results = test_imports()
    
    # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    successful_imports = sum(import_results.values())
    total_imports = len(import_results)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–æ–≤: {successful_imports}/{total_imports} —É—Å–ø–µ—à–Ω–æ")
    
    # –¢–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    agent_ok = False
    web_ok = False
    
    if import_results.get("autonomous_agent", False):
        agent_ok = test_agent_creation()
    else:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–≥–µ–Ω—Ç–∞ - –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞")
    
    web_ok = test_web_interface()
    
    print("\n" + "=" * 60)
    print("üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   –ò–º–ø–æ—Ä—Ç—ã: {successful_imports}/{total_imports}")
    print(f"   –ê–≥–µ–Ω—Ç: {'‚úÖ OK' if agent_ok else '‚ùå FAIL'}")
    print(f"   –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {'‚úÖ OK' if web_ok else '‚ùå FAIL'}")
    
    if agent_ok and web_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("   –ö–æ–Ω—Å–æ–ª—å: python run_agent.py")
        print("   –í–µ–±: streamlit run streamlit_app.py")
    else:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip install -r requirements.txt")
        
        if not agent_ok:
            print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            print("   - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (chromadb, sentence-transformers)")
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å TensorFlow/PyTorch")
            print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π")

if __name__ == "__main__":
    main() 