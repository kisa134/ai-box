import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
import json
import asyncio
import threading
import psutil
import GPUtil

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from autonomous_agent import AutonomousAgent
from core.goal_module import GoalPriority

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ü§ñ AIbox - –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ê–≥–µ–Ω—Ç —Å –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
.user-message {
    padding: 15px;
    margin: 10px 0;
    border-radius: 15px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

.agent-message {
    padding: 15px;
    margin: 10px 0;
    border-radius: 15px;
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    color: white;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

.thinking-process {
    background-color: #f0f8ff;
    border-left: 4px solid #4a90e2;
    padding: 10px;
    margin: 5px 0;
    border-radius: 5px;
    font-style: italic;
}

.metric-card {
    background: linear-gradient(45deg, #f3f4f6, #ffffff);
    padding: 20px;
    border-radius: 10px;
    border: 1px solid #e5e7eb;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.status-active { color: #10b981; font-weight: bold; }
.status-inactive { color: #ef4444; font-weight: bold; }

#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'agent' not in st.session_state:
    st.session_state.agent = None
    st.session_state.conversation_history = []
    st.session_state.agent_running = False
    st.session_state.auto_update = False
    st.session_state.background_task = None

def get_system_resources():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö"""
    try:
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        
        # RAM
        memory = psutil.virtual_memory()
        ram_used = memory.used / (1024**3)  # GB
        ram_total = memory.total / (1024**3)  # GB
        ram_percent = memory.percent
        
        # GPU
        gpus = GPUtil.getGPUs()
        gpu_info = []
        for gpu in gpus:
            gpu_info.append({
                'name': gpu.name,
                'memory_used': gpu.memoryUsed,
                'memory_total': gpu.memoryTotal,
                'memory_percent': (gpu.memoryUsed / gpu.memoryTotal) * 100,
                'temperature': gpu.temperature,
                'load': gpu.load * 100
            })
        
        return {
            'cpu_percent': cpu_percent,
            'ram_used': ram_used,
            'ram_total': ram_total,
            'ram_percent': ram_percent,
            'gpus': gpu_info
        }
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
        return None

def start_agent():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"""
    try:
        if st.session_state.agent is None:
            with st.spinner("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AIbox –∞–≥–µ–Ω—Ç–∞..."):
                st.session_state.agent = AutonomousAgent("AIbox Agent", "agent_data")
                st.session_state.agent.initialize_modules()
                st.session_state.agent.initialize_agent()
                st.session_state.agent_running = True
                st.success("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        else:
            st.warning("‚ö†Ô∏è –ê–≥–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞: {e}")

def stop_agent():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"""
    try:
        if st.session_state.agent:
            st.session_state.agent.stop()
            st.session_state.agent = None
            st.session_state.agent_running = False
            st.success("üõë –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            st.warning("‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–∞: {e}")

def get_agent_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
    if st.session_state.agent:
        try:
            return st.session_state.agent.get_status_report()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {}
    return {}

def show_overview(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã"""
    st.header("üìä –û–±–∑–æ—Ä –°–∏—Å—Ç–µ–º—ã")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    resources = get_system_resources()
    if resources:
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("CPU", f"{resources['cpu_percent']:.1f}%")
        
        with col2:
            st.metric("RAM", f"{resources['ram_used']:.1f}GB / {resources['ram_total']:.1f}GB", f"{resources['ram_percent']:.1f}%")
        
        with col3:
            if resources['gpus']:
                gpu = resources['gpus'][0]  # –ü–µ—Ä–≤–∞—è GPU
                st.metric("GPU VRAM", f"{gpu['memory_used']}MB / {gpu['memory_total']}MB", f"{gpu['memory_percent']:.1f}%")
            else:
                st.metric("GPU", "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    
    # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
    if agent_status:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            cycles = agent_status.get('consciousness_cycles', 0)
            st.metric("üß† –¶–∏–∫–ª—ã –°–æ–∑–Ω–∞–Ω–∏—è", cycles)
        
        with col2:
            goals = agent_status.get('goals_count', 0)
            st.metric("üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –¶–µ–ª–∏", goals)
        
        with col3:
            memories = agent_status.get('memory_stats', {}).get('total_episodes', 0)
            st.metric("üíæ –≠–ø–∏–∑–æ–¥—ã –≤ –ü–∞–º—è—Ç–∏", memories)
        
        with col4:
            thoughts = agent_status.get('active_thoughts', 0)
            st.metric("üå≥ –ê–∫—Ç–∏–≤–Ω—ã–µ –ú—ã—Å–ª–∏", thoughts)
    
    # –ú–æ–¥—É–ª–∏
    st.subheader("üîß –°—Ç–∞—Ç—É—Å –ú–æ–¥—É–ª–µ–π")
    if agent_status and 'modules_status' in agent_status:
        modules = agent_status['modules_status']
        cols = st.columns(4)
        
        module_names = list(modules.keys())
        for i, (col, module_name) in enumerate(zip(cols, module_names)):
            with col:
                status = modules[module_name]
                if status:
                    st.success(f"‚úÖ {module_name}")
                else:
                    st.error(f"‚ùå {module_name}")

def show_chat():
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º"""
    st.header("üí¨ –ß–∞—Ç —Å –ê–≥–µ–Ω—Ç–æ–º")
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    user_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", height=100, key="user_input")
    
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
            if user_input and st.session_state.agent:
                with st.spinner("ü§ñ –ê–≥–µ–Ω—Ç –¥—É–º–∞–µ—Ç..."):
                    try:
                        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        response = loop.run_until_complete(
                            st.session_state.agent.process_input(user_input)
                        )
                        loop.close()
                        
                        # –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                        st.session_state.conversation_history.append({
                            'user': user_input,
                            'agent': response,
                            'timestamp': datetime.now()
                        })
                        
                        st.success("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
                        st.rerun()
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
    
    with col2:
        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
            st.session_state.conversation_history = []
            st.rerun()
    
    # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
    st.subheader("üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞")
    for i, msg in enumerate(st.session_state.conversation_history):
        with st.container():
            st.markdown(f"**üë§ –í—ã ({msg['timestamp'].strftime('%H:%M:%S')}):**")
            st.markdown(f'<div class="user-message">{msg["user"]}</div>', unsafe_allow_html=True)
            
            st.markdown(f"**ü§ñ –ê–≥–µ–Ω—Ç ({msg['timestamp'].strftime('%H:%M:%S')}):**")
            st.markdown(f'<div class="agent-message">{msg["agent"]}</div>', unsafe_allow_html=True)
            st.divider()

def show_ollama_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Ollama"""
    st.header("üîß –°—Ç–∞—Ç—É—Å Ollama")
    
    try:
        import subprocess
        result = subprocess.run(['ollama', 'list'], capture_output=True, text=True)
        
        if result.returncode == 0:
            st.success("‚úÖ Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
            lines = result.stdout.strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            models = []
            
            for line in lines:
                if line.strip():
                    parts = line.split()
                    if len(parts) >= 3:
                        models.append({
                            'name': parts[0],
                            'id': parts[1],
                            'size': parts[2],
                            'modified': ' '.join(parts[3:]) if len(parts) > 3 else ''
                        })
            
            # –¢–∞–±–ª–∏—Ü–∞ –º–æ–¥–µ–ª–µ–π
            if models:
                df = pd.DataFrame(models)
                st.dataframe(df, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            st.error("‚ùå Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama: {e}")

def show_memory_status(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞–º—è—Ç–∏"""
    st.header("üíæ –°—Ç–∞—Ç—É—Å –ü–∞–º—è—Ç–∏")
    
    if st.session_state.agent and hasattr(st.session_state.agent, 'memory'):
        memory = st.session_state.agent.memory
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            try:
                episodes = memory.get_recent_episodes(1000)  # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã
                st.metric("–í—Å–µ–≥–æ —ç–ø–∏–∑–æ–¥–æ–≤", len(episodes))
                
                if episodes:
                    # –¢–∏–ø—ã —ç–ø–∏–∑–æ–¥–æ–≤
                    types = {}
                    for episode in episodes:
                        ep_type = episode.get('type', 'unknown')
                        types[ep_type] = types.get(ep_type, 0) + 1
                    
                    # –ì—Ä–∞—Ñ–∏–∫ —Ç–∏–ø–æ–≤
                    if types:
                        fig = px.pie(values=list(types.values()), names=list(types.keys()), 
                                   title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —ç–ø–∏–∑–æ–¥–æ–≤")
                        st.plotly_chart(fig, use_container_width=True)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        with col2:
            st.subheader("üîç –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏")
            search_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:")
            
            if search_query and st.button("üîç –ù–∞–π—Ç–∏"):
                try:
                    results = memory.retrieve_similar(search_query, 5)
                    if results:
                        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                        for i, result in enumerate(results):
                            with st.expander(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}"):
                                st.write(f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {result['content']}")
                                st.write(f"**–¢–∏–ø:** {result.get('type', 'unknown')}")
                                st.write(f"**–î–∞—Ç–∞:** {result.get('created_at', 'unknown')}")
                    else:
                        st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

def show_consciousness_analysis(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–∑–Ω–∞–Ω–∏—è"""
    st.header("üß† –ê–Ω–∞–ª–∏–∑ –°–æ–∑–Ω–∞–Ω–∏—è")
    
    if st.session_state.agent:
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–æ–∑–Ω–∞–Ω–∏—è
            diagnostic = st.session_state.agent.get_consciousness_diagnostic()
            
            if diagnostic:
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –°–æ–∑–Ω–∞–Ω–∏—è")
                    
                    # –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
                    metrics = ['self_recognition', 'metacognitive_awareness', 'temporal_continuity', 'agency_sense']
                    values = [diagnostic.get(metric, 0) for metric in metrics]
                    
                    fig = go.Figure()
                    fig.add_trace(go.Scatterpolar(
                        r=values,
                        theta=metrics,
                        fill='toself',
                        name='–°–æ–∑–Ω–∞–Ω–∏–µ'
                    ))
                    fig.update_layout(
                        polar=dict(radialaxis=dict(visible=True, range=[0, 1])),
                        showlegend=False,
                        title="–†–∞–¥–∞—Ä –°–æ–∑–Ω–∞–Ω–∏—è"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    st.subheader("üìà –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
                    for metric, value in diagnostic.items():
                        if isinstance(value, (int, float)):
                            st.metric(metric.replace('_', ' ').title(), f"{value:.2f}")
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–Ω–∞–Ω–∏—è: {e}")

def show_goals_motivation(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é"""
    st.header("üéØ –¶–µ–ª–∏ –∏ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
    
    if st.session_state.agent and hasattr(st.session_state.agent, 'goals'):
        goals = st.session_state.agent.goals
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –¶–µ–ª–∏")
            try:
                active_goals = goals.get_active_goals()
                
                for goal in active_goals:
                    with st.expander(f"üéØ {goal.description}"):
                        st.write(f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {goal.priority.value}")
                        st.write(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {goal.progress:.1f}%")
                        st.write(f"**–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–Ω–∞' if goal.active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
                        
                        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                        st.progress(goal.progress / 100)
                        
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª–µ–π: {e}")
        
        with col2:
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¶–µ–ª–µ–π")
            try:
                total_goals = len(goals.goals)
                active_count = len([g for g in goals.goals.values() if g.active])
                completed_count = len([g for g in goals.goals.values() if g.progress >= 100])
                
                st.metric("–í—Å–µ–≥–æ —Ü–µ–ª–µ–π", total_goals)
                st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", active_count)
                st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö", completed_count)
                
                # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if active_goals:
                    goal_names = [g.description[:20] + "..." if len(g.description) > 20 else g.description for g in active_goals]
                    progress_values = [g.progress for g in active_goals]
                    
                    fig = px.bar(x=goal_names, y=progress_values, 
                               title="–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º",
                               labels={'x': '–¶–µ–ª–∏', 'y': '–ü—Ä–æ–≥—Ä–µ—Å—Å (%)'})
                    st.plotly_chart(fig, use_container_width=True)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–ª–µ–π: {e}")

def show_world_model(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª—å –º–∏—Ä–∞"""
    st.header("üåç –ú–æ–¥–µ–ª—å –ú–∏—Ä–∞")
    
    if st.session_state.agent and hasattr(st.session_state.agent, 'world_model'):
        world_model = st.session_state.agent.world_model
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìö –ö–æ–Ω—Ü–µ–ø—Ü–∏–∏")
            try:
                if hasattr(world_model, 'concepts') and world_model.concepts:
                    concepts_df = pd.DataFrame([
                        {
                            '–ö–æ–Ω—Ü–µ–ø—Ü–∏—è': concept,
                            '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': details.get('confidence', 0),
                            '–ß–∞—Å—Ç–æ—Ç–∞': details.get('frequency', 0)
                        }
                        for concept, details in world_model.concepts.items()
                    ])
                    
                    if not concepts_df.empty:
                        st.dataframe(concepts_df, use_container_width=True)
                    else:
                        st.info("–ö–æ–Ω—Ü–µ–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    st.info("–ö–æ–Ω—Ü–µ–ø—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π: {e}")
        
        with col2:
            st.subheader("üîó –û—Ç–Ω–æ—à–µ–Ω–∏—è")
            try:
                if hasattr(world_model, 'relationships') and world_model.relationships:
                    relationships_df = pd.DataFrame([
                        {
                            '–û—Ç': rel.get('from', ''),
                            '–ö': rel.get('to', ''),
                            '–¢–∏–ø': rel.get('type', ''),
                            '–°–∏–ª–∞': rel.get('strength', 0)
                        }
                        for rel in world_model.relationships
                    ])
                    
                    if not relationships_df.empty:
                        st.dataframe(relationships_df, use_container_width=True)
                    else:
                        st.info("–û—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    st.info("–û—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π: {e}")

def show_thought_tree(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ –º—ã—Å–ª–µ–π"""
    st.header("üå≥ –î–µ—Ä–µ–≤–æ –ú—ã—Å–ª–µ–π")
    
    if st.session_state.agent and hasattr(st.session_state.agent, 'thought_tree'):
        thought_tree = st.session_state.agent.thought_tree
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üå± –ê–∫—Ç–∏–≤–Ω—ã–µ –ú—ã—Å–ª–∏")
            try:
                active_thoughts = [t for t in thought_tree.thoughts.values() if hasattr(t, 'status') and t.status.value == "active"]
                
                for thought in active_thoughts[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
                    with st.expander(f"üí≠ {thought.content[:50]}..."):
                        st.write(f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {thought.content}")
                        st.write(f"**–¢–∏–ø:** {thought.thought_type.value}")
                        st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {thought.confidence:.2f}")
                        st.write(f"**–°—Ç–∞—Ç—É—Å:** {thought.status.value}")
                        
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º—ã—Å–ª–µ–π: {e}")
        
        with col2:
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ú—ã—Å–ª–µ–π")
            try:
                total_thoughts = len(thought_tree.thoughts)
                active_count = len([t for t in thought_tree.thoughts.values() if hasattr(t, 'status') and t.status.value == "active"])
                completed_count = len([t for t in thought_tree.thoughts.values() if hasattr(t, 'status') and t.status.value == "completed"])
                
                st.metric("–í—Å–µ–≥–æ –º—ã—Å–ª–µ–π", total_thoughts)
                st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", active_count)
                st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö", completed_count)
                
                # –ì—Ä–∞—Ñ–∏–∫ —Ç–∏–ø–æ–≤ –º—ã—Å–ª–µ–π
                if thought_tree.thoughts:
                    thought_types = {}
                    for thought in thought_tree.thoughts.values():
                        thought_type = thought.thought_type.value
                        thought_types[thought_type] = thought_types.get(thought_type, 0) + 1
                    
                    if thought_types:
                        fig = px.pie(values=list(thought_types.values()), names=list(thought_types.keys()), 
                                   title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –º—ã—Å–ª–µ–π")
                        st.plotly_chart(fig, use_container_width=True)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º—ã—Å–ª–µ–π: {e}")

def show_self_log(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑"""
    st.header("üß† –°–∞–º–æ–∞–Ω–∞–ª–∏–∑")
    
    if st.session_state.agent and hasattr(st.session_state.agent, 'self_model'):
        self_model = st.session_state.agent.self_model
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìù –†–µ—Ñ–ª–µ–∫—Å–∏—è")
            try:
                if hasattr(self_model, 'reflection_history') and self_model.reflection_history:
                    for reflection in self_model.reflection_history[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                        with st.expander(f"üìÖ {reflection.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"):
                            st.write(f"**–¢–µ–º–∞:** {reflection.get('topic', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                            st.write(f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {reflection.get('content', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                            st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {reflection.get('confidence', 0):.2f}")
                else:
                    st.info("–ò—Å—Ç–æ—Ä–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –ø—É—Å—Ç–∞")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")
        
        with col2:
            st.subheader("üìä –ú–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏–µ")
            try:
                if hasattr(self_model, 'metacognitive_insights') and self_model.metacognitive_insights:
                    for insight in self_model.metacognitive_insights[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                        with st.expander(f"üí° {insight.get('type', '–ò–Ω—Å–∞–π—Ç')}"):
                            st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {insight.get('description', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                            st.write(f"**–í–∞–∂–Ω–æ—Å—Ç—å:** {insight.get('importance', 0):.2f}")
                            st.write(f"**–î–∞—Ç–∞:** {insight.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    st.info("–ú–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("ü§ñ AIbox - –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ê–≥–µ–Ω—Ç —Å –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", type="primary"):
                start_agent()
        
        with col2:
            if st.button("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"):
                stop_agent()
        
        # –°—Ç–∞—Ç—É—Å
        st.subheader("üìä –°—Ç–∞—Ç—É—Å")
        if st.session_state.agent_running:
            st.success("‚úÖ –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            st.error("‚ùå –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        st.subheader("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        auto_update = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=st.session_state.auto_update)
        if auto_update != st.session_state.auto_update:
            st.session_state.auto_update = auto_update
            st.rerun()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        st.subheader("üíª –°–∏—Å—Ç–µ–º–∞")
        resources = get_system_resources()
        if resources:
            st.write(f"CPU: {resources['cpu_percent']:.1f}%")
            st.write(f"RAM: {resources['ram_percent']:.1f}%")
            if resources['gpus']:
                gpu = resources['gpus'][0]
                st.write(f"GPU: {gpu['memory_percent']:.1f}%")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs([
        "üìä –û–±–∑–æ—Ä", "üí¨ –ß–∞—Ç", "üîß Ollama", "üíæ –ü–∞–º—è—Ç—å", "üß† –°–æ–∑–Ω–∞–Ω–∏–µ", "üéØ –¶–µ–ª–∏", "üåç –ú–∏—Ä", "üå≥ –ú—ã—Å–ª–∏"
    ])
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
    agent_status = get_agent_status()
    
    with tab1:
        show_overview(agent_status)
    
    with tab2:
        show_chat()
    
    with tab3:
        show_ollama_status()
    
    with tab4:
        show_memory_status(agent_status)
    
    with tab5:
        show_consciousness_analysis(agent_status)
    
    with tab6:
        show_goals_motivation(agent_status)
    
    with tab7:
        show_world_model(agent_status)
    
    with tab8:
        show_thought_tree(agent_status)
    
    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if st.session_state.auto_update:
        time.sleep(2)
        st.rerun()

if __name__ == "__main__":
    main() 