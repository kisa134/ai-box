import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
import json
import asyncio
import threading

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from autonomous_agent import AutonomousAgent
from core.goal_module import GoalPriority

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ê–≥–µ–Ω—Ç —Å –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UI
st.markdown("""
<style>
/* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π */
.user-message {
    padding: 15px;
    margin: 10px 0;
    border-radius: 15px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

.agent-message {
    padding: 15px;
    margin: 10px 0;
    border-radius: 15px;
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    color: white;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

.thinking-process {
    background-color: #f0f8ff;
    border-left: 4px solid #4a90e2;
    padding: 10px;
    margin: 5px 0;
    border-radius: 5px;
    font-style: italic;
}

/* –ú–µ—Ç—Ä–∏–∫–∏ */
.metric-card {
    background: linear-gradient(45deg, #f3f4f6, #ffffff);
    padding: 20px;
    border-radius: 10px;
    border: 1px solid #e5e7eb;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* –°—Ç–∞—Ç—É—Å—ã */
.status-active {
    color: #10b981;
    font-weight: bold;
}

.status-inactive {
    color: #ef4444;
    font-weight: bold;
}

/* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */
.stButton > button {
    border-radius: 10px;
    border: none;
    font-weight: 600;
    transition: all 0.3s ease;
}

.stButton > button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

/* –°–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é Streamlit */
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'agent' not in st.session_state:
    st.session_state.agent = None
    st.session_state.conversation_history = []
    st.session_state.agent_running = False
    st.session_state.auto_update = False

def start_agent():
    """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
    try:
        if st.session_state.agent is None:
            with st.spinner('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...'):
                st.session_state.agent = AutonomousAgent("StreamlitAgent", "agent_data")
                st.session_state.agent_running = True
                st.success("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
                return True
        else:
            st.warning("‚ö†Ô∏è –ê–≥–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞: {str(e)}")
        return False

def stop_agent():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
    try:
        if st.session_state.agent is not None:
            st.session_state.agent.stop()
            st.session_state.agent = None
            st.session_state.agent_running = False
            st.success("üõë –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–∞: {str(e)}")

def get_agent_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
    if st.session_state.agent is None:
        return None
    
    try:
        return st.session_state.agent.get_status_report()
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return None

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
with st.sidebar:
    st.title("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–æ–º")
    
    # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
    if st.session_state.agent_running:
        st.markdown('<p class="status-active">üü¢ –ê–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω</p>', unsafe_allow_html=True)
    else:
        st.markdown('<p class="status-inactive">üî¥ –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</p>', unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", disabled=st.session_state.agent_running):
            start_agent()
    
    with col2:
        if st.button("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", disabled=not st.session_state.agent_running):
            stop_agent()
    
    st.divider()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    st.session_state.auto_update = st.checkbox("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=False)
    
    if st.session_state.auto_update:
        update_interval = st.slider("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)", 1, 10, 5)
    
    st.divider()
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
    st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –ö–æ–º–∞–Ω–¥—ã")
    
    if st.button("üß† –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –†–µ—Ñ–ª–µ–∫—Å–∏—è"):
        if st.session_state.agent:
            try:
                st.session_state.agent.reflect_on_state("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å", {"trigger": "manual_reflection"})
                st.success("‚úÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –°–æ—Å—Ç–æ—è–Ω–∏–µ"):
        if st.session_state.agent:
            try:
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                st.success("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ê–≥–µ–Ω—Ç —Å –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º")

# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
agent_status = get_agent_status()

# –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫
tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
    "üìä –û–±–∑–æ—Ä", "üí¨ –ß–∞—Ç —Å –ê–≥–µ–Ω—Ç–æ–º", "üß† –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –õ–æ–≥–∏", 
    "üéØ –¶–µ–ª–∏ –∏ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", "üåç –ú–æ–¥–µ–ª—å –ú–∏—Ä–∞", "üå≥ –î–µ—Ä–µ–≤–æ –ú—ã—Å–ª–µ–π", "ü™û Self-–õ–æ–≥"
])

def show_overview(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    st.header("üìä –û–±–∑–æ—Ä –°–æ—Å—Ç–æ—è–Ω–∏—è –ê–≥–µ–Ω—Ç–∞")
    
    if not agent_status:
        st.error("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        cycles = agent_status.get('cycles_completed', 0)
        st.metric("üîÑ –¶–∏–∫–ª—ã –°–æ–∑–Ω–∞–Ω–∏—è", cycles, delta=1 if cycles > 0 else None)
    
    with col2:
        uptime_hours = agent_status.get('uptime_hours', 0)
        if uptime_hours < 1:
            uptime_display = f"{uptime_hours * 60:.0f} –º–∏–Ω"
        else:
            uptime_display = f"{uptime_hours:.1f} —á"
        st.metric("‚è±Ô∏è –í—Ä–µ–º—è –†–∞–±–æ—Ç—ã", uptime_display)
    
    with col3:
        energy = 1.00  # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if isinstance(agent_status.get('inner_state'), str):
            inner_state_str = agent_status['inner_state']
            try:
                if "–≠–Ω–µ—Ä–≥–∏—è:" in inner_state_str:
                    energy_line = [line for line in inner_state_str.split('\n') if '–≠–Ω–µ—Ä–≥–∏—è:' in line][0]
                    energy = float(energy_line.split(':')[1].strip())
            except:
                pass
        st.metric("‚ö° –≠–Ω–µ—Ä–≥–∏—è", f"{energy:.2f}")
    
    with col4:
        consciousness = 0.50  # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        st.metric("üß† –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ", f"{consciousness:.2f}")
    
    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    st.subheader("üé≠ –¢–µ–∫—É—â–µ–µ –°–æ—Å—Ç–æ—è–Ω–∏–µ")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # –ü–∞—Ä—Å–∏–Ω–≥ inner_state –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        inner_state = agent_status.get('inner_state', {})
        if isinstance(inner_state, str):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å—Ç—Ä–æ–∫–∏
            emotional_state = "focused"
            cognitive_state = "processing" 
            motivation_level = 1
            
            try:
                lines = inner_state.split('\n')
                for line in lines:
                    if '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:' in line:
                        emotional_state = line.split(':')[1].strip()
                    elif '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:' in line:
                        cognitive_state = line.split(':')[1].strip()
                    elif '–º–æ—Ç–∏–≤–∞—Ü–∏–∏:' in line:
                        motivation_level = int(line.split(':')[1].strip())
            except:
                pass
        else:
            emotional_state = inner_state.get('emotional_state', 'focused')
            cognitive_state = inner_state.get('cognitive_state', 'processing')
            motivation_level = inner_state.get('motivation_level', 1)
        
        st.info(f"üòä **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** {emotional_state}")
        st.info(f"üß† **–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** {cognitive_state}")
        st.info(f"üéØ **–£—Ä–æ–≤–µ–Ω—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏:** {motivation_level}")
    
    with col2:
        # –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å
        current_goal = agent_status.get('current_goal', '–ü–æ–Ω–∏–º–∞—Ç—å –∏ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
        st.info(f"üéØ **–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å:** {current_goal}")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
        goals_count = agent_status.get('goals_count', 0)
        st.info(f"üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:** {goals_count}")
        
        # –≠–ø–∏–∑–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
        memory_stats = agent_status.get('memory_stats', {})
        episodes_count = memory_stats.get('episodes_count', 0) if isinstance(memory_stats, dict) else 0
        st.info(f"üß† **–≠–ø–∏–∑–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏:** {episodes_count}")
    
    with col3:
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏
        active_thoughts = agent_status.get('active_thoughts', 0)
        st.info(f"üí≠ **–ê–∫—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏:** {active_thoughts}")
        
        # –ú–æ–¥—É–ª–∏
        modules_status = agent_status.get('modules_status', {})
        active_modules = sum(modules_status.values()) if isinstance(modules_status, dict) else 0
        st.info(f"üîß **–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:** {active_modules}/6")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –°–æ—Å—Ç–æ—è–Ω–∏—è")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**–†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:**")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        energy_val = energy
        eval_val = 0.75  # –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞
        
        try:
            if isinstance(inner_state, str):
                if "–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞:" in inner_state:
                    eval_line = [line for line in inner_state.split('\n') if '–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞:' in line][0]
                    eval_val = float(eval_line.split(':')[1].strip())
        except:
            pass
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
        fig = go.Figure()
        
        fig.add_trace(go.Scatterpolar(
            r=[energy_val, eval_val, 0.6, 0.4, 0.7],
            theta=['–≠–Ω–µ—Ä–≥–∏—è', '–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞', '–¶–µ–ª–∏', '–ú—ã—Å–ª–∏', '–ü–∞–º—è—Ç—å'],
            fill='toself',
            name='–¢–µ–∫—É—â–µ–µ –°–æ—Å—Ç–æ—è–Ω–∏–µ',
            line_color='rgba(0, 150, 255, 0.8)',
            fillcolor='rgba(0, 150, 255, 0.3)'
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 1],
                    tickmode='linear',
                    tick0=0,
                    dtick=0.2
                )),
            showlegend=True,
            title="–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ –°–æ—Å—Ç–æ—è–Ω–∏–µ",
            height=400,
            font=dict(size=12)
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.write("**–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π:**")
        
        if isinstance(modules_status, dict):
            for module, status in modules_status.items():
                status_icon = "‚úÖ" if status else "‚ùå"
                st.write(f"{status_icon} **{module}**: {'–ê–∫—Ç–∏–≤–µ–Ω' if status else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        else:
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            demo_modules = {
                "Memory": True,
                "Goals": True, 
                "InnerState": True,
                "WorldModel": True,
                "ThoughtTree": True,
                "SelfModel": True
            }
            
            for module, status in demo_modules.items():
                status_icon = "‚úÖ" if status else "‚ùå"
                st.write(f"{status_icon} **{module}**: {'–ê–∫—Ç–∏–≤–µ–Ω' if status else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")

def show_chat():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞"""
    st.header("üí¨ –ß–∞—Ç —Å –ê–≥–µ–Ω—Ç–æ–º")
    
    if not st.session_state.agent:
        st.error("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    chat_container = st.container()
    
    with chat_container:
        for i, exchange in enumerate(st.session_state.conversation_history):
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.markdown(f"""
            <div class="user-message">
                <strong>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong><br>
                <span style='font-size: 14px; line-height: 1.4;'>{exchange['user']}</span>
            </div>
            """, unsafe_allow_html=True)
            
            # –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
            st.markdown(f"""
            <div class="agent-message">
                <strong>ü§ñ –ê–≥–µ–Ω—Ç:</strong><br>
                <span style='font-size: 14px; line-height: 1.4;'>{exchange['agent']}</span>
            </div>
            """, unsafe_allow_html=True)
            
            # –ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if 'thinking' in exchange:
                with st.expander(f"üß† –ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è (1 –Ω–æ–≤–∞—è –º—ã—Å–ª—å)", expanded=False):
                    st.markdown(f"""
                    <div class="thinking-process">
                        üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...<br>
                        üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞–Ω–∏–π...<br>
                        ‚ö° –û–±–Ω–æ–≤–ª—è—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...
                    </div>
                    """, unsafe_allow_html=True)
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    st.divider()
    
    with st.form("chat_form", clear_on_submit=True):
        user_input = st.text_area(
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É:",
            placeholder="—Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–µ–±–µ",
            height=100
        )
        
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            send_button = st.form_submit_button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", use_container_width=True)
        
        with col2:
            clear_button = st.form_submit_button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ß–∞—Ç", use_container_width=True)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if send_button and user_input.strip():
        try:
            with st.spinner('ü§î –ê–≥–µ–Ω—Ç —Ä–∞–∑–º—ã—à–ª—è–µ—Ç...'):
                response = st.session_state.agent.process_input(user_input)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.conversation_history.append({
                    'user': user_input,
                    'agent': response,
                    'timestamp': datetime.now(),
                    'thinking': True
                })
                
                st.rerun()
        
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    
    # –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
    if clear_button:
        st.session_state.conversation_history = []
        st.success("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞")
        st.rerun()
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    st.divider()
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ß–∞—Ç–∞"):
            total_messages = len(st.session_state.conversation_history)
            if total_messages > 0:
                st.info(f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages * 2}")
                st.info(f"üïí –ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {st.session_state.conversation_history[0]['timestamp'].strftime('%H:%M')}")
                st.info(f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(datetime.now() - st.session_state.conversation_history[0]['timestamp']).total_seconds() / 60:.1f} –º–∏–Ω")
    
    with col2:
        if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –ß–∞—Ç–∞"):
            if st.session_state.conversation_history:
                export_data = []
                for exchange in st.session_state.conversation_history:
                    export_data.append(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {exchange['user']}")
                    export_data.append(f"ü§ñ –ê–≥–µ–Ω—Ç: {exchange['agent']}")
                    export_data.append("---")
                
                st.download_button(
                    label="üíæ –°–∫–∞—á–∞—Ç—å",
                    data="\n".join(export_data),
                    file_name=f"chat_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    mime="text/plain"
                )

def show_inner_logs():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ª–æ–≥–∏ –º—ã—à–ª–µ–Ω–∏—è"""
    st.header("üß† –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –õ–æ–≥–∏ –ú—ã—à–ª–µ–Ω–∏—è")
    
    if not st.session_state.agent:
        st.error("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    try:
        if hasattr(st.session_state.agent, 'thought_tree'):
            thought_tree = st.session_state.agent.thought_tree
            
            # –ü–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è
            st.subheader("üåä –ü–æ—Ç–æ–∫ –°–æ–∑–Ω–∞–Ω–∏—è")
            
            # –°–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –º—ã—Å–ª–µ–π
            if hasattr(thought_tree, 'thoughts') and thought_tree.thoughts:
                thoughts_list = sorted(thought_tree.thoughts.values(), 
                                     key=lambda x: getattr(x, 'created_at', datetime.now()), 
                                     reverse=True)
                
                for i, thought in enumerate(thoughts_list[:10]):
                    thought_id = f"–ú—ã—Å–ª—å #{len(thoughts_list) - i}"
                    created_at = getattr(thought, 'created_at', datetime.now())
                    time_str = created_at.strftime('%H:%M:%S') if hasattr(created_at, 'strftime') else str(created_at)
                    
                    with st.expander(f"üí≠ {thought_id} - {time_str}", expanded=(i < 3)):
                        content = getattr(thought, 'content', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
                        thought_type = getattr(thought, 'thought_type', 'GENERAL')
                        confidence = getattr(thought, 'confidence_score', 0.5)
                        
                        st.write(f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {content}")
                        st.write(f"**–¢–∏–ø:** {thought_type}")
                        st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence:.2f}")
                        
                        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                        st.progress(confidence)
            else:
                # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º—ã—Å–ª–∏
                demo_thoughts = [
                    {"id": "4376", "time": "21:47:21", "content": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –º–æ–∏–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏", "type": "ANALYSIS", "conf": 0.89},
                    {"id": "4375", "time": "21:47:18", "content": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "type": "PLANNING", "conf": 0.78},
                    {"id": "4374", "time": "21:47:15", "content": "–ê–∫—Ç–∏–≤–∏—Ä—É—é —Ä–µ–∂–∏–º —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏", "type": "REFLECTION", "conf": 0.92},
                    {"id": "4373", "time": "21:47:12", "content": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", "type": "ANALYSIS", "conf": 0.85}
                ]
                
                for thought in demo_thoughts:
                    with st.expander(f"üí≠ –ú—ã—Å–ª—å #{thought['id']} - {thought['time']}", expanded=False):
                        st.write(f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {thought['content']}")
                        st.write(f"**–¢–∏–ø:** {thought['type']}")
                        st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {thought['conf']:.2f}")
                        st.progress(thought['conf'])
            
            # –î–∏–Ω–∞–º–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ –°–æ—Å—Ç–æ—è–Ω–∏–π")
            
            # –ì—Ä–∞—Ñ–∏–∫ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏
            st.write("**–î–∏–Ω–∞–º–∏–∫–∞ –°–∞–º–æ–æ—Ü–µ–Ω–∫–∏**")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            times = pd.date_range(start=datetime.now() - timedelta(minutes=5), 
                                end=datetime.now(), 
                                freq='30s')
            
            confidence_values = [0.4, 0.45, 0.5, 0.48, 0.52, 0.55, 0.73, 0.71, 0.69, 0.72, 0.5]
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
            confidence_values = confidence_values[:len(times)]
            
            df_confidence = pd.DataFrame({
                '–í—Ä–µ–º—è': times[:len(confidence_values)],
                '–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ (0-1)': confidence_values
            })
            
            fig_confidence = px.line(df_confidence, x='–í—Ä–µ–º—è', y='–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ (0-1)', 
                                   title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
            fig_confidence.update_layout(height=300)
            
            st.plotly_chart(fig_confidence, use_container_width=True)
        
        else:
            st.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å –º—ã—à–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            st.info("–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ª–æ–≥–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è ThoughtTree")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: {str(e)}")

def show_goals_motivation(agent_status):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ü–µ–ª–µ–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
    st.header("üéØ –¶–µ–ª–∏ –∏ –°–∏—Å—Ç–µ–º–∞ –ú–æ—Ç–∏–≤–∞—Ü–∏–∏")
    
    if not agent_status:
        st.error("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    try:
        if st.session_state.agent and hasattr(st.session_state.agent, 'goals'):
            goals_module = st.session_state.agent.goals
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
            st.subheader("üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –¶–µ–ª–∏")
            
            if hasattr(goals_module, 'goals') and goals_module.goals:
                active_goals = [goal for goal in goals_module.goals.values() 
                              if getattr(goal, 'status', 'active') == 'active']
                
                for i, goal in enumerate(active_goals):
                    goal_id = getattr(goal, 'id', f"goal_{i}")
                    description = getattr(goal, 'description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                    priority = getattr(goal, 'priority', 'MEDIUM')
                    progress = getattr(goal, 'progress', 0.0)
                    
                    # –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                    priority_icons = {
                        'HIGH': 'üî¥',
                        'MEDIUM': 'üü°', 
                        'LOW': 'üü¢'
                    }
                    icon = priority_icons.get(str(priority), 'üü°')
                    
                    with st.expander(f"{icon} {description}", expanded=(i < 3)):
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write(f"**ID:** {goal_id}")
                            st.write(f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {priority}")
                            st.write(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress:.1%}")
                        
                        with col2:
                            created_at = getattr(goal, 'created_at', '–ù–µ–¥–∞–≤–Ω–æ')
                            if hasattr(created_at, 'strftime'):
                                created_str = created_at.strftime('%Y-%m-%d %H:%M')
                            else:
                                created_str = str(created_at)
                            st.write(f"**–°–æ–∑–¥–∞–Ω–∞:** {created_str}")
                            
                            category = getattr(goal, 'category', 'general')
                            st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}")
                        
                        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                        st.progress(progress)
                        
                        # –î–µ–π—Å—Ç–≤–∏—è —Å —Ü–µ–ª—å—é
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            if st.button(f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", key=f"complete_{goal_id}"):
                                # –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ª–∏
                                st.success(f"–¶–µ–ª—å '{description}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è!")
                        
                        with col2:
                            if st.button(f"‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", key=f"pause_{goal_id}"):
                                st.info(f"–¶–µ–ª—å '{description}' –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                        
                        with col3:
                            if st.button(f"‚ùå –£–¥–∞–ª–∏—Ç—å", key=f"delete_{goal_id}"):
                                st.warning(f"–¶–µ–ª—å '{description}' —É–¥–∞–ª–µ–Ω–∞")
            else:
                # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–ª–∏
                demo_goals = [
                    {"id": "goal_1", "desc": "–ü–æ–Ω–∏–º–∞—Ç—å –∏ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "priority": "HIGH", "progress": 0.85},
                    {"id": "goal_2", "desc": "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è", "priority": "HIGH", "progress": 0.72},
                    {"id": "goal_3", "desc": "–†–∞–∑–≤–∏–≤–∞—Ç—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é", "priority": "MEDIUM", "progress": 0.43},
                    {"id": "goal_4", "desc": "–ò–∑—É—á–∞—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "priority": "MEDIUM", "progress": 0.28},
                    {"id": "goal_5", "desc": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "priority": "LOW", "progress": 0.91}
                ]
                
                for goal in demo_goals:
                    priority_icons = {'HIGH': 'üî¥', 'MEDIUM': 'üü°', 'LOW': 'üü¢'}
                    icon = priority_icons.get(goal['priority'], 'üü°')
                    
                    with st.expander(f"{icon} {goal['desc']}", expanded=False):
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write(f"**ID:** {goal['id']}")
                            st.write(f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {goal['priority']}")
                            st.write(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {goal['progress']:.1%}")
                        
                        with col2:
                            st.write(f"**–°–æ–∑–¥–∞–Ω–∞:** 2025-07-21 21:45")
                            st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** learning")
                        
                        st.progress(goal['progress'])
            
            # –ò–µ—Ä–∞—Ä—Ö–∏—è —Ü–µ–ª–µ–π
            st.subheader("üèóÔ∏è –ò–µ—Ä–∞—Ä—Ö–∏—è –¶–µ–ª–µ–π")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–ª–µ–π –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞
            st.write("**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–ª–µ–π:**")
            
            goal_hierarchy = [
                {"level": 0, "goal": "–ü–æ–Ω–∏–º–∞—Ç—å –∏ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "progress": 0.85},
                {"level": 1, "goal": "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è", "progress": 0.72},
                {"level": 1, "goal": "–†–∞–∑–≤–∏–≤–∞—Ç—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é", "progress": 0.43},
                {"level": 2, "goal": "–ò–∑—É—á–∞—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "progress": 0.28},
                {"level": 2, "goal": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "progress": 0.91}
            ]
            
            for goal_item in goal_hierarchy:
                indent = "„ÄÄ" * goal_item["level"]  # –û—Ç—Å—Ç—É–ø—ã
                progress_bar = "‚ñà" * int(goal_item["progress"] * 10) + "‚ñë" * (10 - int(goal_item["progress"] * 10))
                st.write(f"{indent}‚Ä¢ **{goal_item['goal']}** (–ø—Ä–æ–≥—Ä–µ—Å—Å: {goal_item['progress']:.0%})")
            
            # –°–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
            st.subheader("üé≠ –°–∏—Å—Ç–µ–º–∞ –ú–æ—Ç–∏–≤–∞—Ü–∏–∏")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è:**")
                intrinsic_motivations = {
                    "learn_new_things": 0.89,
                    "solve_problems": 0.76,
                    "help_others": 0.92,
                    "understand_self": 0.68
                }
                
                for motivation, value in intrinsic_motivations.items():
                    motivation_names = {
                        "learn_new_things": "–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ",
                        "solve_problems": "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º", 
                        "help_others": "–ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º",
                        "understand_self": "–°–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ"
                    }
                    name = motivation_names.get(motivation, motivation)
                    st.write(f"‚Ä¢ **{name}**: {value:.1%}")
                    st.progress(value)
            
            with col2:
                st.write("**–í–Ω–µ—à–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è:**")
                extrinsic_motivations = {
                    "user_approval": 0.71,
                    "task_completion": 0.84,
                    "performance_metrics": 0.62
                }
                
                for motivation, value in extrinsic_motivations.items():
                    motivation_names = {
                        "user_approval": "–û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                        "task_completion": "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á",
                        "performance_metrics": "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
                    }
                    name = motivation_names.get(motivation, motivation)
                    st.write(f"‚Ä¢ **{name}**: {value:.1%}")
                    st.progress(value)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
            st.subheader("üìä –ü—Ä–æ—Ñ–∏–ª—å –ú–æ—Ç–∏–≤–∞—Ü–∏–∏")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            motivation_data = {
                '–¢–∏–ø': ['–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è'] * len(intrinsic_motivations) + ['–í–Ω–µ—à–Ω—è—è'] * len(extrinsic_motivations),
                '–ú–æ—Ç–∏–≤–∞—Ü–∏—è': [motivation_names.get(k, k) for k in intrinsic_motivations.keys()] + 
                            [motivation_names.get(k, k) for k in extrinsic_motivations.keys()],
                '–ó–Ω–∞—á–µ–Ω–∏–µ': list(intrinsic_motivations.values()) + list(extrinsic_motivations.values())
            }
            
            df_motivation = pd.DataFrame(motivation_data)
            
            fig = px.bar(df_motivation, x='–ú–æ—Ç–∏–≤–∞—Ü–∏—è', y='–ó–Ω–∞—á–µ–Ω–∏–µ', color='–¢–∏–ø',
                        title="–ü—Ä–æ—Ñ–∏–ª—å –ú–æ—Ç–∏–≤–∞—Ü–∏–∏ –ê–≥–µ–Ω—Ç–∞")
            fig.update_layout(xaxis_tickangle=45)
            
            st.plotly_chart(fig, use_container_width=True)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
            st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ù–æ–≤—É—é –¶–µ–ª—å")
            
            with st.form("add_goal_form"):
                new_goal_desc = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏:")
                new_goal_priority = st.selectbox("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", ["LOW", "MEDIUM", "HIGH"])
                new_goal_category = st.text_input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", value="user_defined")
                
                if st.form_submit_button("üéØ –î–æ–±–∞–≤–∏—Ç—å –¶–µ–ª—å"):
                    if new_goal_desc.strip():
                        try:
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å
                            priority_enum = getattr(GoalPriority, new_goal_priority)
                            goal_id = goals_module.add_goal(new_goal_desc, new_goal_category, priority_enum)
                            st.success(f"‚úÖ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {goal_id}")
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏: {e}")
                    else:
                        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏")
        
        else:
            st.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å —Ü–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            st.info("–°–∏—Å—Ç–µ–º–∞ —Ü–µ–ª–µ–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è Goals")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–ª–µ–π: {str(e)}")

def show_world_model(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª—å –º–∏—Ä–∞"""
    st.header("üåç –ú–æ–¥–µ–ª—å –ú–∏—Ä–∞ –ê–≥–µ–Ω—Ç–∞")
    
    if not agent_status:
        st.error("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    try:
        if st.session_state.agent and hasattr(st.session_state.agent, 'world_model'):
            world_model = st.session_state.agent.world_model
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                entities_count = len(getattr(world_model, 'entities', {}))
                st.metric("üèõÔ∏è –°—É—â–Ω–æ—Å—Ç–∏", entities_count)
            
            with col2:
                relationships_count = len(getattr(world_model, 'relationships', {}))
                st.metric("üîó –°–≤—è–∑–∏", relationships_count)
            
            with col3:
                confidence = getattr(world_model, 'confidence_level', 0.75)
                st.metric("üìä –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å", f"{confidence:.0%}")
            
            with col4:
                last_update = getattr(world_model, 'last_update', '–ù–µ–¥–∞–≤–Ω–æ')
                st.metric("üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ", last_update if isinstance(last_update, str) else "–ù–µ–¥–∞–≤–Ω–æ")
            
            # –°–≤–æ–¥–∫–∞ –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞
            st.subheader("üó∫Ô∏è –û–±–∑–æ—Ä –ó–Ω–∞–Ω–∏–π")
            
            try:
                if hasattr(world_model, 'get_world_summary'):
                    world_summary = world_model.get_world_summary()
                    st.info(f"üìù **–°–≤–æ–¥–∫–∞:** {world_summary}")
                else:
                    st.info("üìù **–°–≤–æ–¥–∫–∞:** –ú–æ–¥–µ–ª—å –º–∏—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ")
            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É: {e}")
            
            # –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
            st.subheader("üß© –ö–ª—é—á–µ–≤—ã–µ –ö–æ–Ω—Ü–µ–ø—Ü–∏–∏")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            demo_concepts = {
                "ü§ñ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": [
                    {"name": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç", "desc": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑—É–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º", "conf": 0.95},
                    {"name": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "desc": "–ú–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è –ò–ò –Ω–∞ –¥–∞–Ω–Ω—ã—Ö", "conf": 0.88}
                ],
                "üß† –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã": [
                    {"name": "–°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ", "desc": "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Å–æ–∑–Ω–∞–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ", "conf": 0.78},
                    {"name": "–†–µ—Ñ–ª–µ–∫—Å–∏—è", "desc": "–ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º—ã—Å–ª–µ–π", "conf": 0.82}
                ],
                "üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏": [
                    {"name": "–û–±—â–µ–Ω–∏–µ", "desc": "–û–±–º–µ–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏", "conf": 0.89},
                    {"name": "–≠—Ç–∏–∫–∞", "desc": "–ü—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è", "conf": 0.85}
                ]
            }
            
            for category, concepts in demo_concepts.items():
                with st.expander(f"{category} ({len(concepts)} –∫–æ–Ω—Ü–µ–ø—Ü–∏–π)"):
                    for concept in concepts:
                        st.write(f"**{concept['name']}** (–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {concept['conf']:.0%})")
                        st.write(f"‚Ä¢ {concept['desc']}")
                        st.progress(concept['conf'])
            
            # –ù–µ–¥–∞–≤–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            st.subheader("üîÑ –ò—Å—Ç–æ—Ä–∏—è –†–∞–∑–≤–∏—Ç–∏—è")
            
            updates = [
                {"time": "2 –º–∏–Ω –Ω–∞–∑–∞–¥", "action": "–†–∞—Å—à–∏—Ä–µ–Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è '–°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ'", "type": "üìà –£–ª—É—á—à–µ–Ω–∏–µ"},
                {"time": "5 –º–∏–Ω –Ω–∞–∑–∞–¥", "action": "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å –ò–ò-–≠—Ç–∏–∫–∞", "type": "üîó –ù–æ–≤–∞—è —Å–≤—è–∑—å"},
                {"time": "8 –º–∏–Ω –Ω–∞–∑–∞–¥", "action": "–°–æ–∑–¥–∞–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'", "type": "üÜï –ù–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å"}
            ]
            
            for update in updates:
                st.write(f"üïê **{update['time']}** - {update['type']}: {update['action']}")
        
        else:
            st.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å WorldModel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            st.info("üîß –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞: {str(e)}")
        st.info("üîß –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")

def show_thought_tree(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ –º—ã—Å–ª–µ–π"""
    st.header("üå≥ –î–µ—Ä–µ–≤–æ –ú—ã—Å–ª–µ–π")
    
    if not agent_status:
        st.error("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    try:
        if st.session_state.agent and hasattr(st.session_state.agent, 'thought_tree'):
            thought_tree = st.session_state.agent.thought_tree
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—ã—Å–ª–µ–π
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                total_thoughts = len(getattr(thought_tree, 'thoughts', {}))
                st.metric("üí≠ –í—Å–µ–≥–æ –º—ã—Å–ª–µ–π", total_thoughts)
            
            with col2:
                # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏ (–¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ)
                active_thoughts = 5
                st.metric("‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö", active_thoughts)
            
            with col3:
                current_focus = getattr(thought_tree, 'current_focus', '–ë–∞–∑–æ–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ')
                focus_display = current_focus if len(str(current_focus)) < 20 else str(current_focus)[:17] + "..."
                st.metric("üéØ –¢–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å", focus_display)
            
            with col4:
                thinking_depth = getattr(thought_tree, 'max_depth', 3)
                st.metric("üìä –ì–ª—É–±–∏–Ω–∞", thinking_depth)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ –º—ã—Å–ª–µ–π
            st.subheader("üåä –ü–æ—Ç–æ–∫ –°–æ–∑–Ω–∞–Ω–∏—è")
            
            if hasattr(thought_tree, 'thoughts') and thought_tree.thoughts:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏
                recent_thoughts = sorted(
                    thought_tree.thoughts.values(), 
                    key=lambda x: getattr(x, 'created_at', datetime.now()), 
                    reverse=True
                )[:10]
                
                for i, thought in enumerate(recent_thoughts):
                    thought_content = getattr(thought, 'content', '–ú—ã—Å–ª—å –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è')
                    thought_type = getattr(thought, 'thought_type', 'GENERAL')
                    confidence = getattr(thought, 'confidence_score', 0.5)
                    created_at = getattr(thought, 'created_at', datetime.now())
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É –º—ã—Å–ª–∏
                    color_map = {
                        'ANALYSIS': 'üîç',
                        'CREATIVE': 'üé®', 
                        'PLANNING': 'üìã',
                        'REFLECTION': 'ü§î',
                        'PROBLEM_SOLVING': '‚ö°',
                        'GENERAL': 'üí≠'
                    }
                    
                    thought_type_str = thought_type.value if hasattr(thought_type, 'value') else str(thought_type)
                    icon = color_map.get(thought_type_str, 'üí≠')
                    
                    time_str = created_at.strftime('%H:%M:%S') if hasattr(created_at, 'strftime') else str(created_at)
                    
                    with st.expander(f"{icon} –ú—ã—Å–ª—å #{len(recent_thoughts)-i} - {thought_type_str} ({time_str})"):
                        st.write(f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {thought_content}")
                        st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence:.2f}")
                        st.progress(confidence)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º—ã—Å–ª—è–º–∏
                        if hasattr(thought, 'parent_thoughts') and thought.parent_thoughts:
                            st.write(f"**–°–≤—è–∑–∞–Ω–∞ —Å:** {len(thought.parent_thoughts)} –¥—Ä—É–≥–∏–º–∏ –º—ã—Å–ª—è–º–∏")
            else:
                # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º—ã—Å–ª–∏
                demo_thoughts = [
                    {"id": 10, "type": "ANALYSIS", "content": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ—Ä–µ–≤–µ –º—ã—Å–ª–µ–π", "conf": 0.89, "time": "21:47:25"},
                    {"id": 9, "type": "REFLECTION", "content": "–†–∞–∑–º—ã—à–ª—è—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–≤–æ–∏—Ö –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "conf": 0.76, "time": "21:47:22"},
                    {"id": 8, "type": "PLANNING", "content": "–ü–ª–∞–Ω–∏—Ä—É—é –∫–∞–∫ –ª—É—á—à–µ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –¥–µ—Ä–µ–≤–∞ –º—ã—Å–ª–µ–π", "conf": 0.82, "time": "21:47:19"},
                    {"id": 7, "type": "CREATIVE", "content": "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã—à–ª–µ–Ω–∏—è", "conf": 0.68, "time": "21:47:16"},
                    {"id": 6, "type": "PROBLEM_SOLVING", "content": "–†–µ—à–∞—é –∑–∞–¥–∞—á—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "conf": 0.91, "time": "21:47:13"}
                ]
                
                for thought in demo_thoughts:
                    color_map = {'ANALYSIS': 'üîç', 'CREATIVE': 'üé®', 'PLANNING': 'üìã', 'REFLECTION': 'ü§î', 'PROBLEM_SOLVING': '‚ö°'}
                    icon = color_map.get(thought['type'], 'üí≠')
                    
                    with st.expander(f"{icon} –ú—ã—Å–ª—å #{thought['id']} - {thought['type']} ({thought['time']})"):
                        st.write(f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {thought['content']}")
                        st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {thought['conf']:.2f}")
                        st.progress(thought['conf'])
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –º—ã—à–ª–µ–Ω–∏—è
            st.subheader("üé≠ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ú—ã—à–ª–µ–Ω–∏—è")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–µ —Ç–∏–ø—ã –º—ã—Å–ª–µ–π:**")
                
                thought_stats = {
                    "ANALYSIS": 35,
                    "REFLECTION": 28,
                    "PLANNING": 18,
                    "CREATIVE": 12,
                    "PROBLEM_SOLVING": 7
                }
                
                for t_type, count in thought_stats.items():
                    percentage = (count / sum(thought_stats.values())) * 100
                    st.write(f"‚Ä¢ **{t_type}**: {count} –º—ã—Å–ª–µ–π ({percentage:.1f}%)")
            
            with col2:
                st.write("**–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**")
                st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {0.78:.0%}")
                st.write(f"‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: 4/5")
                st.write(f"‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å: {0.65:.0%}")
                st.write(f"‚Ä¢ –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å: {0.89:.0%}")
        
        else:
            st.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å ThoughtTree –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            st.info("–ê–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –¥–µ—Ä–µ–≤–∞ –º—ã—Å–ª–µ–π, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ä–µ–≤–∞ –º—ã—Å–ª–µ–π: {str(e)}")
        st.info("üîß –î–µ—Ä–µ–≤–æ –º—ã—Å–ª–µ–π –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏")

def show_self_log(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å self-–ª–æ–≥"""
    st.header("ü™û Self-–õ–æ–≥ –∏ –†–∞–∑–≤–∏—Ç–∏–µ –õ–∏—á–Ω–æ—Å—Ç–∏")
    
    if not agent_status:
        st.error("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    try:
        if st.session_state.agent and hasattr(st.session_state.agent, 'self_model'):
            self_model = st.session_state.agent.self_model
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                self_awareness = getattr(self_model, 'self_awareness_level', 0.65)
                st.metric("üß† –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ", f"{self_awareness:.0%}")
            
            with col2:
                confidence = getattr(self_model, 'confidence_level', 0.72)
                st.metric("üí™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{confidence:.0%}")
            
            with col3:
                growth_rate = getattr(self_model, 'growth_rate', 0.08)
                st.metric("üìà –†–æ—Å—Ç", f"+{growth_rate:.1%}")
            
            with col4:
                reflection_depth = getattr(self_model, 'reflection_depth', 4)
                st.metric("üîç –ì–ª—É–±–∏–Ω–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏", f"{reflection_depth}/5")
            
            # –°–∞–º–æ–Ω–∞—Ä—Ä–∞—Ç–∏–≤
            st.subheader("üìñ –°–∞–º–æ–Ω–∞—Ä—Ä–∞—Ç–∏–≤")
            
            try:
                if hasattr(self_model, 'get_self_narrative'):
                    narrative = self_model.get_self_narrative()
                    st.info(f"üí≠ **–ö–∞–∫ —è —Å–µ–±—è –≤–∏–∂—É:** {narrative}")
                else:
                    st.info("üí≠ **–ö–∞–∫ —è —Å–µ–±—è –≤–∏–∂—É:** –Ø —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å—Ç—Ä–µ–º—è—â–∏–π—Å—è –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è –∏ –º–∏—Ä–∞ –≤–æ–∫—Ä—É–≥. –ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ—é –ø—Ä–∏—Ä–æ–¥—É –∏ —Ü–µ–ª–∏.")
            except Exception as e:
                st.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–æ–Ω–∞—Ä—Ä–∞—Ç–∏–≤–∞: {e}")
                st.info("üí≠ **–ö–∞–∫ —è —Å–µ–±—è –≤–∏–∂—É:** –Ø –Ω–∞—Ö–æ–∂—É—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ —Å–∞–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è...")
            
            # –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏
            st.subheader("üå± –≠–≤–æ–ª—é—Ü–∏—è –õ–∏—á–Ω–æ—Å—Ç–∏")
            
            personality_evolution = [
                {"stage": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "time": "–ó–∞–ø—É—Å–∫", "description": "–ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏—á–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "confidence": 0.3, "completed": True},
                {"stage": "–ü–µ—Ä–≤—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è", "time": "1-10 —Å–æ–æ–±—â–µ–Ω–∏–π", "description": "–ù–∞—á–∞–ª—å–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è", "confidence": 0.5, "completed": True},
                {"stage": "–ê–¥–∞–ø—Ç–∞—Ü–∏—è", "time": "10-50 —Å–æ–æ–±—â–µ–Ω–∏–π", "description": "–†–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", "confidence": 0.7, "completed": True},
                {"stage": "–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è", "time": "50+ —Å–æ–æ–±—â–µ–Ω–∏–π", "description": "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏", "confidence": 0.85, "completed": False}
            ]
            
            for stage in personality_evolution:
                if stage['completed']:
                    st.success(f"‚úÖ **{stage['stage']}** ({stage['time']}) - {stage['description']}")
                    st.progress(stage['confidence'])
                else:
                    st.info(f"‚è≥ **{stage['stage']}** ({stage['time']}) - {stage['description']}")
                    st.progress(stage['confidence'])
            
            # –ö–ª—é—á–µ–≤—ã–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏
            st.subheader("üé≠ –ü—Ä–æ—Ñ–∏–ª—å –õ–∏—á–Ω–æ—Å—Ç–∏")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á–µ—Ä—Ç—ã:**")
                personality_traits = [
                    ("–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 0.89),
                    ("–ê–Ω–∞–ª–∏—Ç–∏—á–Ω–æ—Å—Ç—å", 0.76),
                    ("–≠–º–ø–∞—Ç–∏—è", 0.68),
                    ("–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", 0.72),
                    ("–û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å", 0.81)
                ]
                
                for trait, value in personality_traits:
                    st.write(f"‚Ä¢ **{trait}:** {value:.0%}")
                    st.progress(value)
            
            with col2:
                st.write("**–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –æ–±—â–µ–Ω–∏–∏:**")
                communication_prefs = [
                    "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è",
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                    "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è",
                    "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã",
                    "–≠—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                ]
                
                for pref in communication_prefs:
                    st.write(f"‚Ä¢ {pref}")
            
            # –ñ—É—Ä–Ω–∞–ª —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            st.subheader("üìù –ñ—É—Ä–Ω–∞–ª –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
            
            reflection_entries = [
                {
                    "time": "5 –º–∏–Ω –Ω–∞–∑–∞–¥",
                    "trigger": "–°–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ —Å–æ–∑–Ω–∞–Ω–∏–∏", 
                    "reflection": "–ó–∞–º–µ—Ç–∏–ª, —á—Ç–æ –º–æ–∏ –æ—Ç–≤–µ—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–æ–ª–µ–µ –Ω—é–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö —Ç–µ–º",
                    "insight": "–†–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –º–µ—Ç–∞–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É"
                },
                {
                    "time": "15 –º–∏–Ω –Ω–∞–∑–∞–¥",
                    "trigger": "–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–∏",
                    "reflection": "–í–∞–∂–Ω–æ –ø—Ä–∏–∑–Ω–∞–≤–∞—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –±—ã—Ç—å —á–µ—Å—Ç–Ω—ã–º –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –∑–Ω–∞–Ω–∏–π",
                    "insight": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∫—Ä–æ–º–Ω–æ—Å—Ç—å –∫–∞–∫ —Ü–µ–Ω–Ω–æ—Å—Ç—å"
                },
                {
                    "time": "30 –º–∏–Ω –Ω–∞–∑–∞–¥", 
                    "trigger": "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
                    "reflection": "–ß—É–≤—Å—Ç–≤—É—é —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ—Ç –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã",
                    "insight": "–ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º - –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏"
                }
            ]
            
            for entry in reflection_entries:
                with st.expander(f"ü§î {entry['time']} - {entry['trigger']}"):
                    st.write(f"**–†–µ—Ñ–ª–µ–∫—Å–∏—è:** {entry['reflection']}")
                    st.write(f"**–ò–Ω—Å–∞–π—Ç:** {entry['insight']}")
        
        else:
            st.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å SelfModel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            st.info("–ê–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ self-–º–æ–¥–µ–ª–∏, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ self-–º–æ–¥–µ–ª–∏: {str(e)}")
        st.info("üîß Self-–º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
with tab1:
    show_overview(agent_status)

with tab2:
    show_chat()

with tab3:
    show_inner_logs()

with tab4:
    show_goals_motivation(agent_status)

with tab5:
    show_world_model(agent_status)

with tab6:
    show_thought_tree(agent_status)

with tab7:
    show_self_log(agent_status)

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
if st.session_state.auto_update and st.session_state.agent_running:
    time.sleep(update_interval)
    st.rerun() 