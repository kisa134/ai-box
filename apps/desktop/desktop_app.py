#!/usr/bin/env python3
"""
AIbox Desktop Application
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

import customtkinter as ctk
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import asyncio
import json
import time
import psutil
import GPUtil
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import networkx as nx
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from autonomous_agent import AutonomousAgent
from core.goal_module import GoalPriority

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CustomTkinter
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class AIboxDesktopApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AIbox"""
    
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("ü§ñ AIbox - –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ê–≥–µ–Ω—Ç —Å –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º")
        self.root.geometry("1400x900")
        
        # –ê–≥–µ–Ω—Ç
        self.agent = None
        self.agent_running = False
        self.auto_update = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.start_auto_update()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(self.root)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            main_frame, 
            text="ü§ñ AIbox - –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ê–≥–µ–Ω—Ç —Å –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(pady=10)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.setup_control_panel(main_frame)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.setup_tabs(main_frame)
    
    def setup_control_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = ctk.CTkFrame(parent)
        control_frame.pack(fill="x", padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ctk.CTkFrame(control_frame)
        button_frame.pack(side="left", padx=10, pady=5)
        
        self.start_button = ctk.CTkButton(
            button_frame,
            text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ê–≥–µ–Ω—Ç–∞",
            command=self.start_agent,
            fg_color="green"
        )
        self.start_button.pack(side="left", padx=5)
        
        self.stop_button = ctk.CTkButton(
            button_frame,
            text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ê–≥–µ–Ω—Ç–∞",
            command=self.stop_agent,
            fg_color="red"
        )
        self.stop_button.pack(side="left", padx=5)
        
        # –°—Ç–∞—Ç—É—Å
        status_frame = ctk.CTkFrame(control_frame)
        status_frame.pack(side="right", padx=10, pady=5)
        
        self.status_label = ctk.CTkLabel(
            status_frame,
            text="‚ùå –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            font=ctk.CTkFont(size=14)
        )
        self.status_label.pack()
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.auto_update_var = tk.BooleanVar()
        auto_update_checkbox = ctk.CTkCheckBox(
            control_frame,
            text="üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
            variable=self.auto_update_var,
            command=self.toggle_auto_update
        )
        auto_update_checkbox.pack(side="right", padx=10)
    
    def setup_tabs(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫"""
        # –°–æ–∑–¥–∞–Ω–∏–µ notebook
        self.notebook = ttk.Notebook(parent)
        self.notebook.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
        self.dashboard_tab = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.dashboard_tab, text="üìä –ì–ª–∞–≤–Ω—ã–π –î–∞—à–±–æ—Ä–¥")
        self.setup_dashboard()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –î–∏–∞–ª–æ–≥ —Å –∞–≥–µ–Ω—Ç–æ–º
        self.chat_tab = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.chat_tab, text="üí¨ –î–∏–∞–ª–æ–≥ —Å –ê–≥–µ–Ω—Ç–æ–º")
        self.setup_chat()
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –ü–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è
        self.consciousness_tab = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.consciousness_tab, text="üß† –ü–æ—Ç–æ–∫ –°–æ–∑–Ω–∞–Ω–∏—è")
        self.setup_consciousness()
        
        # –í–∫–ª–∞–¥–∫–∞ 4: –î–µ—Ä–µ–≤–æ –º—ã—Å–ª–µ–π
        self.thoughts_tab = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.thoughts_tab, text="üå≥ –î–µ—Ä–µ–≤–æ –ú—ã—Å–ª–µ–π")
        self.setup_thoughts()
        
        # –í–∫–ª–∞–¥–∫–∞ 5: –ü–∞–º—è—Ç—å –∏ —Ü–µ–ª–∏
        self.memory_tab = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.memory_tab, text="üíæ –ü–∞–º—è—Ç—å –∏ –¶–µ–ª–∏")
        self.setup_memory()
        
        # –í–∫–ª–∞–¥–∫–∞ 6: Self-–º–æ–¥–µ–ª—å
        self.self_model_tab = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.self_model_tab, text="üß† Self-–ú–æ–¥–µ–ª—å")
        self.setup_self_model()
        
        # –í–∫–ª–∞–¥–∫–∞ 7: –ë–µ–Ω—á–º–∞—Ä–∫–∏
        self.benchmarks_tab = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.benchmarks_tab, text="üìä –ë–µ–Ω—á–º–∞—Ä–∫–∏")
        self.setup_benchmarks()
        
        # –í–∫–ª–∞–¥–∫–∞ 8: –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings_tab = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.settings_tab, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.setup_settings()
    
    def setup_dashboard(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å KPI
        kpi_frame = ctk.CTkFrame(self.dashboard_tab)
        kpi_frame.pack(fill="x", padx=10, pady=5)
        
        # KPI –º–µ—Ç—Ä–∏–∫–∏
        self.self_awareness_label = ctk.CTkLabel(kpi_frame, text="Self-Awareness: 0.0")
        self.self_awareness_label.pack(side="left", padx=10)
        
        self.explainability_label = ctk.CTkLabel(kpi_frame, text="Explainability: 0.0")
        self.explainability_label.pack(side="left", padx=10)
        
        self.cognitive_flexibility_label = ctk.CTkLabel(kpi_frame, text="Cognitive Flexibility: 0.0")
        self.cognitive_flexibility_label.pack(side="left", padx=10)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        charts_frame = ctk.CTkFrame(self.dashboard_tab)
        charts_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.create_resource_charts(charts_frame)
    
    def setup_chat(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–æ–º"""
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_frame = ctk.CTkFrame(self.chat_tab)
        input_frame.pack(fill="x", padx=10, pady=5)
        
        self.chat_input = ctk.CTkTextbox(input_frame, height=100)
        self.chat_input.pack(side="left", fill="x", expand=True, padx=5)
        
        send_button = ctk.CTkButton(
            input_frame,
            text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            command=self.send_message
        )
        send_button.pack(side="right", padx=5)
        
        # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
        chat_history_frame = ctk.CTkFrame(self.chat_tab)
        chat_history_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        self.chat_history = ctk.CTkTextbox(chat_history_frame, wrap="word")
        self.chat_history.pack(fill="both", expand=True, padx=5, pady=5)
    
    def setup_consciousness(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–∞ —Å–æ–∑–Ω–∞–Ω–∏—è"""
        # –§–∏–ª—å—Ç—Ä—ã
        filter_frame = ctk.CTkFrame(self.consciousness_tab)
        filter_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(filter_frame, text="–§–∏–ª—å—Ç—Ä —Å–æ–±—ã—Ç–∏–π:").pack(side="left", padx=5)
        
        self.event_filter = ctk.CTkComboBox(
            filter_frame,
            values=["–í—Å–µ —Å–æ–±—ã—Ç–∏—è", "–ú—ã—Å–ª–∏", "–≠–º–æ—Ü–∏–∏", "–ü–∞–º—è—Ç—å", "–¶–µ–ª–∏"]
        )
        self.event_filter.pack(side="left", padx=5)
        
        # –ü–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π
        events_frame = ctk.CTkFrame(self.consciousness_tab)
        events_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        self.events_list = ctk.CTkTextbox(events_frame, wrap="word")
        self.events_list.pack(fill="both", expand=True, padx=5, pady=5)
    
    def setup_thoughts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ä–µ–≤–∞ –º—ã—Å–ª–µ–π"""
        # –ö–æ–Ω—Ç—Ä–æ–ª—ã
        controls_frame = ctk.CTkFrame(self.thoughts_tab)
        controls_frame.pack(fill="x", padx=10, pady=5)
        
        refresh_button = ctk.CTkButton(
            controls_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self.refresh_thoughts
        )
        refresh_button.pack(side="left", padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≥—Ä–∞—Ñ–∞
        graph_frame = ctk.CTkFrame(self.thoughts_tab)
        graph_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        self.thoughts_canvas = tk.Canvas(graph_frame, bg="white")
        self.thoughts_canvas.pack(fill="both", expand=True)
    
    def setup_memory(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–º—è—Ç–∏ –∏ —Ü–µ–ª–µ–π"""
        # –ü–∞–Ω–µ–ª–∏
        panels_frame = ctk.CTkFrame(self.memory_tab)
        panels_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ü–∞–º—è—Ç—å
        memory_frame = ctk.CTkFrame(panels_frame)
        memory_frame.pack(side="left", fill="both", expand=True, padx=5)
        
        ctk.CTkLabel(memory_frame, text="üíæ –ü–∞–º—è—Ç—å", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)
        
        # –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
        search_frame = ctk.CTkFrame(memory_frame)
        search_frame.pack(fill="x", padx=5, pady=5)
        
        self.memory_search = ctk.CTkEntry(search_frame, placeholder_text="–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏...")
        self.memory_search.pack(side="left", fill="x", expand=True, padx=5)
        
        search_button = ctk.CTkButton(search_frame, text="üîç", command=self.search_memory)
        search_button.pack(side="right", padx=5)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        self.memory_results = ctk.CTkTextbox(memory_frame, wrap="word")
        self.memory_results.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –¶–µ–ª–∏
        goals_frame = ctk.CTkFrame(panels_frame)
        goals_frame.pack(side="right", fill="both", expand=True, padx=5)
        
        ctk.CTkLabel(goals_frame, text="üéØ –¶–µ–ª–∏", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)
        
        self.goals_list = ctk.CTkTextbox(goals_frame, wrap="word")
        self.goals_list.pack(fill="both", expand=True, padx=5, pady=5)
    
    def setup_self_model(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Self-–º–æ–¥–µ–ª–∏"""
        # –ü–∞–Ω–µ–ª–∏
        panels_frame = ctk.CTkFrame(self.self_model_tab)
        panels_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ü—Ä–æ—Ñ–∏–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏
        profile_frame = ctk.CTkFrame(panels_frame)
        profile_frame.pack(side="left", fill="both", expand=True, padx=5)
        
        ctk.CTkLabel(profile_frame, text="üë§ –ü—Ä–æ—Ñ–∏–ª—å –õ–∏—á–Ω–æ—Å—Ç–∏", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)
        
        self.personality_text = ctk.CTkTextbox(profile_frame, wrap="word")
        self.personality_text.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ú–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏–µ
        metacognition_frame = ctk.CTkFrame(panels_frame)
        metacognition_frame.pack(side="right", fill="both", expand=True, padx=5)
        
        ctk.CTkLabel(metacognition_frame, text="üß† –ú–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏–µ", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)
        
        self.metacognition_text = ctk.CTkTextbox(metacognition_frame, wrap="word")
        self.metacognition_text.pack(fill="both", expand=True, padx=5, pady=5)
    
    def setup_benchmarks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤"""
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        buttons_frame = ctk.CTkFrame(self.benchmarks_tab)
        buttons_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkButton(
            buttons_frame,
            text="üß™ –¢–µ—Å—Ç –°–∞–º–æ—É–∑–Ω–∞–≤–∞–Ω–∏—è",
            command=self.run_self_recognition_test
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            buttons_frame,
            text="üß† –¢–µ—Å—Ç –ú–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è",
            command=self.run_metacognition_test
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            buttons_frame,
            text="‚è∞ –¢–µ—Å—Ç –í—Ä–µ–º–µ–Ω–Ω–æ–π –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
            command=self.run_temporal_test
        ).pack(side="left", padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_frame = ctk.CTkFrame(self.benchmarks_tab)
        results_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        self.benchmarks_text = ctk.CTkTextbox(results_frame, wrap="word")
        self.benchmarks_text.pack(fill="both", expand=True, padx=5, pady=5)
    
    def setup_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –ú–æ–¥–µ–ª–∏ Ollama
        models_frame = ctk.CTkFrame(self.settings_tab)
        models_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(models_frame, text="üîß –ú–æ–¥–µ–ª–∏ Ollama", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)
        
        # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        self.models_list = ctk.CTkTextbox(models_frame, height=200)
        self.models_list.pack(fill="x", padx=5, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞
        agent_frame = ctk.CTkFrame(self.settings_tab)
        agent_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(agent_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≥–µ–Ω—Ç–∞", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)
        
        # –ß–∞—Å—Ç–æ—Ç–∞ —Ü–∏–∫–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è
        cycle_frame = ctk.CTkFrame(agent_frame)
        cycle_frame.pack(fill="x", padx=5, pady=5)
        
        ctk.CTkLabel(cycle_frame, text="–ß–∞—Å—Ç–æ—Ç–∞ —Ü–∏–∫–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è (—Å–µ–∫):").pack(side="left", padx=5)
        
        self.cycle_frequency = ctk.CTkEntry(cycle_frame, width=100)
        self.cycle_frequency.pack(side="left", padx=5)
        self.cycle_frequency.insert(0, "30")
    
    def create_resource_charts(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã matplotlib
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 6))
        fig.patch.set_facecolor('#2b2b2b')
        
        # –ì—Ä–∞—Ñ–∏–∫ CPU –∏ RAM
        ax1.set_facecolor('#2b2b2b')
        ax1.set_title('CPU –∏ RAM', color='white')
        ax1.set_ylabel('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (%)', color='white')
        ax1.tick_params(colors='white')
        
        # –ì—Ä–∞—Ñ–∏–∫ GPU
        ax2.set_facecolor('#2b2b2b')
        ax2.set_title('GPU VRAM', color='white')
        ax2.set_ylabel('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (MB)', color='white')
        ax2.tick_params(colors='white')
        
        # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤ tkinter
        canvas = FigureCanvasTkAgg(fig, parent)
        canvas.draw()
        canvas.get_tk_widget().pack(fill="both", expand=True)
        
        self.resource_canvas = canvas
        self.resource_fig = fig
        self.resource_ax1 = ax1
        self.resource_ax2 = ax2
    
    def start_agent(self):
        """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        try:
            if self.agent is None:
                self.status_label.configure(text="üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...")
                
                # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                thread = threading.Thread(target=self._initialize_agent)
                thread.start()
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ê–≥–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
    
    def _initialize_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.agent = AutonomousAgent("Desktop AIbox Agent", "agent_data")
            self.agent.initialize_modules()
            self.agent.initialize_agent()
            
            self.agent_running = True
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self._update_status_after_start)
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"))
    
    def _update_status_after_start(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
        self.status_label.configure(text="‚úÖ –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", text_color="green")
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    
    def stop_agent(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
        try:
            if self.agent:
                self.agent.stop()
                self.agent = None
                self.agent_running = False
                self.status_label.configure(text="‚ùå –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", text_color="red")
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
    
    def toggle_auto_update(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.auto_update = self.auto_update_var.get()
    
    def start_auto_update(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if self.auto_update:
            self.update_dashboard()
        
        # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        self.root.after(1000, self.start_auto_update)
    
    def update_dashboard(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            if self.agent and self.agent_running:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                status = self.agent.get_status_report()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ KPI
                if 'consciousness_cycles' in status:
                    cycles = status['consciousness_cycles']
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤
                self.update_resource_charts()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")
    
    def update_resource_charts(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Å—É—Ä—Å–∞—Ö
            cpu_percent = psutil.cpu_percent()
            memory = psutil.virtual_memory()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            self.resource_ax1.clear()
            self.resource_ax1.set_facecolor('#2b2b2b')
            self.resource_ax1.set_title('CPU –∏ RAM', color='white')
            self.resource_ax1.set_ylabel('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (%)', color='white')
            self.resource_ax1.tick_params(colors='white')
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            self.resource_ax1.bar(['CPU', 'RAM'], [cpu_percent, memory.percent])
            
            # GPU –¥–∞–Ω–Ω—ã–µ
            try:
                gpus = GPUtil.getGPUs()
                if gpus:
                    gpu = gpus[0]
                    self.resource_ax2.clear()
                    self.resource_ax2.set_facecolor('#2b2b2b')
                    self.resource_ax2.set_title('GPU VRAM', color='white')
                    self.resource_ax2.set_ylabel('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (MB)', color='white')
                    self.resource_ax2.tick_params(colors='white')
                    
                    self.resource_ax2.bar(['VRAM'], [gpu.memoryUsed])
            except:
                pass
            
            self.resource_canvas.draw()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
    
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É"""
        if not self.agent or not self.agent_running:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        message = self.chat_input.get("1.0", "end-1c")
        if not message.strip():
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.chat_history.insert("end", f"[{timestamp}] üë§ –í—ã: {message}\n")
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.chat_input.delete("1.0", "end")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._process_message, args=(message,))
        thread.start()
    
    def _process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            response = loop.run_until_complete(self.agent.process_input(message))
            loop.close()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            timestamp = datetime.now().strftime("%H:%M:%S")
            self.root.after(0, lambda: self.chat_history.insert("end", f"[{timestamp}] ü§ñ –ê–≥–µ–Ω—Ç: {response}\n\n"))
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"))
    
    def refresh_thoughts(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –º—ã—Å–ª–µ–π"""
        if not self.agent or not self.agent_running:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –º—ã—Å–ª–µ–π
            if hasattr(self.agent, 'thought_tree'):
                thoughts = self.agent.thought_tree.thoughts
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞
                G = nx.DiGraph()
                
                for thought_id, thought in thoughts.items():
                    G.add_node(thought_id, content=thought.content[:50])
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if hasattr(thought, 'parent_id') and thought.parent_id:
                        G.add_edge(thought.parent_id, thought_id)
                
                # –û—á–∏—Å—Ç–∫–∞ canvas
                self.thoughts_canvas.delete("all")
                
                # –†–∏—Å–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞
                pos = nx.spring_layout(G)
                
                # –†–∏—Å–æ–≤–∞–Ω–∏–µ —É–∑–ª–æ–≤
                for node, (x, y) in pos.items():
                    x_canvas = (x + 1) * 200 + 100
                    y_canvas = (y + 1) * 100 + 100
                    
                    self.thoughts_canvas.create_oval(
                        x_canvas-20, y_canvas-20, x_canvas+20, y_canvas+20,
                        fill="lightblue", outline="blue"
                    )
                    
                    content = G.nodes[node]['content']
                    self.thoughts_canvas.create_text(
                        x_canvas, y_canvas, text=content, font=("Arial", 8)
                    )
                
                # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ä—ë–±–µ—Ä
                for edge in G.edges():
                    start_pos = pos[edge[0]]
                    end_pos = pos[edge[1]]
                    
                    x1 = (start_pos[0] + 1) * 200 + 100
                    y1 = (start_pos[1] + 1) * 100 + 100
                    x2 = (end_pos[0] + 1) * 200 + 100
                    y2 = (end_pos[1] + 1) * 100 + 100
                    
                    self.thoughts_canvas.create_line(x1, y1, x2, y2, fill="gray", arrow="last")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –º—ã—Å–ª–µ–π: {e}")
    
    def search_memory(self):
        """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏"""
        if not self.agent or not self.agent_running:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        query = self.memory_search.get()
        if not query.strip():
            return
        
        try:
            if hasattr(self.agent, 'memory'):
                results = self.agent.memory.retrieve_similar(query, 5)
                
                # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                self.memory_results.delete("1.0", "end")
                
                if results:
                    for i, result in enumerate(results, 1):
                        content = result.get('content', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                        result_type = result.get('type', 'unknown')
                        
                        self.memory_results.insert("end", f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i}:\n")
                        self.memory_results.insert("end", f"–¢–∏–ø: {result_type}\n")
                        self.memory_results.insert("end", f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}\n")
                        self.memory_results.insert("end", "-" * 50 + "\n")
                else:
                    self.memory_results.insert("end", "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏: {e}")
    
    def run_self_recognition_test(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∞–º–æ—É–∑–Ω–∞–≤–∞–Ω–∏—è"""
        if not self.agent or not self.agent_running:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            diagnostic = self.agent.get_consciousness_diagnostic()
            score = diagnostic.get('self_recognition', 0.0)
            
            self.benchmarks_text.insert("end", f"üß™ –¢–µ—Å—Ç –°–∞–º–æ—É–∑–Ω–∞–≤–∞–Ω–∏—è: {score:.2f}\n")
            self.benchmarks_text.insert("end", f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n")
            self.benchmarks_text.insert("end", "-" * 50 + "\n")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∞–º–æ—É–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
    
    def run_metacognition_test(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è"""
        if not self.agent or not self.agent_running:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            diagnostic = self.agent.get_consciousness_diagnostic()
            score = diagnostic.get('metacognitive_awareness', 0.0)
            
            self.benchmarks_text.insert("end", f"üß† –¢–µ—Å—Ç –ú–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è: {score:.2f}\n")
            self.benchmarks_text.insert("end", f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n")
            self.benchmarks_text.insert("end", "-" * 50 + "\n")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è: {e}")
    
    def run_temporal_test(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏"""
        if not self.agent or not self.agent_running:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            diagnostic = self.agent.get_consciousness_diagnostic()
            score = diagnostic.get('temporal_continuity', 0.0)
            
            self.benchmarks_text.insert("end", f"‚è∞ –¢–µ—Å—Ç –í—Ä–µ–º–µ–Ω–Ω–æ–π –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏: {score:.2f}\n")
            self.benchmarks_text.insert("end", f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n")
            self.benchmarks_text.insert("end", "-" * 50 + "\n")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = AIboxDesktopApp()
    app.run()

if __name__ == "__main__":
    main() 