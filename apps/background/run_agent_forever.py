#!/usr/bin/env python3
"""
–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ AIbox –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import signal
import sys
import os
import time
import psutil
import GPUtil
from datetime import datetime
from autonomous_agent import AutonomousAgent

class ForeverAgentRunner:
    """–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.agent = None
        self.running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        print("ü§ñ AIbox Forever Agent")
        print("=" * 60)
        
        try:
            # –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
            print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
            self.agent = AutonomousAgent("Forever AIbox Agent", "agent_data")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")
            self.agent.initialize_modules()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
            print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...")
            self.agent.initialize_agent()
            
            print("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å GPU
            await self._check_gpu_usage()
            
            # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è
            self.running = True
            print("üß† –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è...")
            print("üí° –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")
            print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω.")
            print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            print("-" * 60)
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è
            await self.agent.run_consciousness_cycle()
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    
    async def _check_gpu_usage(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU"""
        try:
            gpus = GPUtil.getGPUs()
            if gpus:
                print("üéÆ GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞:")
                for i, gpu in enumerate(gpus):
                    print(f"   GPU {i}: {gpu.name}")
                    print(f"   VRAM: {gpu.memoryUsed}MB / {gpu.memoryTotal}MB")
                    print(f"   –ó–∞–≥—Ä—É–∑–∫–∞: {gpu.load * 100:.1f}%")
                    print(f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {gpu.temperature}¬∞C")
            else:
                print("‚ö†Ô∏è GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"""
        self.running = False
        print("\nüõë –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
        
        if self.agent:
            self.agent.stop()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    runner = ForeverAgentRunner()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        print(f"\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        runner.stop()
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await runner.start()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        print("‚úÖ –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ AIbox –∞–≥–µ–Ω—Ç–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Ollama
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama...")
    try:
        import subprocess
        result = subprocess.run(['ollama', 'list'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω")
            lines = result.stdout.strip().split('\n')[1:]
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len([l for l in lines if l.strip()])}")
        else:
            print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama: {e}")
    
    print("\nüéØ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞...")
    asyncio.run(main()) 