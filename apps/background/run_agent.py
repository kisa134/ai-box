#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
"""

import asyncio
import signal
import sys
from autonomous_agent import AutonomousAgent

class AgentRunner:
    """–ó–∞–ø—É—Å–∫–∞—Ç–µ–ª—å –∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.agent = None
        self.running = False
    
    async def run_agent(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"""
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º...")
        
        self.agent = AutonomousAgent("–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –ê–≥–µ–Ω—Ç", "agent_data")
        self.running = True
        
        # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        print(f"‚úÖ –ê–≥–µ–Ω—Ç '{self.agent.agent_name}' –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üìä –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞:")
        print(f"   - –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {self.agent.created_at}")
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π: {len(self.agent.goals.goals)}")
        print(f"   - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {self.agent.data_dir}")
        print()
        print("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è...")
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")
        print("=" * 60)
        
        try:
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞
            await self.agent.run_consciousness_cycle()
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∞–≥–µ–Ω—Ç–∞: {e}")
        finally:
            await self.shutdown()
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        print(f"\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        if self.agent:
            self.agent.stop()
        self.running = False
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        print("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞...")
        
        if self.agent:
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.agent.save_state()
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            status = self.agent.get_status_report()
            print("\nüìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   - –¶–∏–∫–ª—ã —Å–æ–∑–Ω–∞–Ω–∏—è: {status['consciousness_cycles']}")
            print(f"   - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['uptime']}")
            print(f"   - –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {status['statistics']['total_memories']}")
            print(f"   - –í—Å–µ–≥–æ –º—ã—Å–ª–µ–π: {status['statistics']['total_thoughts']}")
            print(f"   - –†–µ—Ñ–ª–µ–∫—Å–∏–π: {status['statistics']['reflections_count']}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏
            public_thoughts = self.agent.get_public_log()
            if public_thoughts:
                print(f"\nüí≠ –ü–æ—Å–ª–µ–¥–Ω—è—è –º—ã—Å–ª—å (—Ü–∏–∫–ª #{public_thoughts[-1]['cycle']}):")
                print(f"   {public_thoughts[-1]['focused_thought']}")
        
        print("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

async def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
    print("üí¨ –í–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    
    agent = AutonomousAgent("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ê–≥–µ–Ω—Ç", "agent_data")
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞ –≤ —Ñ–æ–Ω–µ
    agent_task = asyncio.create_task(agent.run_consciousness_cycle())
    
    try:
        while True:
            user_input = input("–í—ã: ")
            
            if user_input.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                break
            
            if user_input.strip():
                response = agent.process_input(user_input)
                print(f"–ê–≥–µ–Ω—Ç: {response}\n")
    
    except KeyboardInterrupt:
        print("\nüõë –í—ã—Ö–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
    
    finally:
        agent.stop()
        agent_task.cancel()
        try:
            await agent_task
        except asyncio.CancelledError:
            pass

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == "--interactive":
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        asyncio.run(interactive_mode())
    else:
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        runner = AgentRunner()
        asyncio.run(runner.run_agent())

if __name__ == "__main__":
    main() 