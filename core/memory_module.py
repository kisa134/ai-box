import chromadb
import numpy as np
from datetime import datetime
from typing import List, Dict, Any, Optional
from sentence_transformers import SentenceTransformer
import uuid
import json
import threading
import queue

class SimpleMemory:
    """–ü—Ä–æ—Å—Ç–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self):
        self.episodes: Dict[str, Dict[str, Any]] = {}
        self.episode_list: List[str] = []  # –î–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        
    def store(self, episode_id: str, content: str, metadata: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–ø–∏–∑–æ–¥"""
        self.episodes[episode_id] = {
            "content": content,
            "metadata": metadata,
            "timestamp": datetime.now().isoformat()
        }
        self.episode_list.append(episode_id)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä
        if len(self.episode_list) > 1000:
            old_id = self.episode_list.pop(0)
            if old_id in self.episodes:
                del self.episodes[old_id]
    
    def retrieve_recent(self, count: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —ç–ø–∏–∑–æ–¥—ã"""
        recent_ids = self.episode_list[-count:] if count > 0 else self.episode_list
        return [
            {
                "id": episode_id,
                "content": self.episodes[episode_id]["content"],
                "metadata": self.episodes[episode_id]["metadata"]
            }
            for episode_id in reversed(recent_ids) 
            if episode_id in self.episodes
        ]
    
    def search_simple(self, query: str, limit: int) -> List[Dict[str, Any]]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        query_words = set(query.lower().split())
        results = []
        
        for episode_id, episode_data in self.episodes.items():
            content_words = set(episode_data["content"].lower().split())
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            relevance = len(query_words.intersection(content_words)) / len(query_words) if query_words else 0
            
            if relevance > 0:
                results.append({
                    "id": episode_id,
                    "content": episode_data["content"],
                    "metadata": episode_data["metadata"],
                    "relevance": relevance
                })
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        results.sort(key=lambda x: x["relevance"], reverse=True)
        return results[:limit]

class MemoryModule:
    """
    –ú–æ–¥—É–ª—å –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —ç–ø–∏–∑–æ–¥–æ–≤ –æ–ø—ã—Ç–∞,
    —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –ø–æ–∑–Ω–∞–Ω–∏–π –∏ –ª–æ–≥–æ–≤ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
    """
    
    def __init__(self, collection_name: str = "agent_memory"):
        self.collection_name = collection_name
        self.client = None
        self.collection = None
        self.encoder = None
        self.encoder_loading = False
        self.use_fallback = False
        
        # Fallback –ø–∞–º—è—Ç—å
        self.simple_memory = SimpleMemory()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB
        self._init_chromadb()
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        self._init_encoder_async()
        
    def _init_chromadb(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB"""
        try:
            self.client = chromadb.Client()
            self.collection = self.client.get_or_create_collection(
                name=self.collection_name
            )
            print("‚úÖ ChromaDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å")
            self.use_fallback = True
    
    def _init_encoder_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–Ω–∫–æ–¥–µ—Ä–∞"""
        def load_encoder():
            try:
                print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ SentenceTransformer...")
                self.encoder = SentenceTransformer('all-MiniLM-L6-v2')
                print("‚úÖ SentenceTransformer –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è  SentenceTransformer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                print("üîÑ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω")
            finally:
                self.encoder_loading = False
        
        if not self.use_fallback:
            self.encoder_loading = True
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=load_encoder, daemon=True).start()
        
    def is_ready(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        if self.use_fallback:
            return True
        return self.collection is not None and (self.encoder is not None or not self.encoder_loading)
    
    def store_episode(self, 
                     content: str, 
                     episode_type: str,
                     metadata: Optional[Dict[str, Any]] = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–ø–∏–∑–æ–¥ –æ–ø—ã—Ç–∞"""
        episode_id = str(uuid.uuid4())
        timestamp = datetime.now().isoformat()
        
        if metadata is None:
            metadata = {}
            
        # –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        clean_metadata = {
            "timestamp": timestamp,
            "type": episode_type,
            "episode_id": episode_id
        }
        
        # –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if metadata:
            for key, value in metadata.items():
                if isinstance(value, (str, int, float, bool)):
                    clean_metadata[key] = value
                elif isinstance(value, dict):
                    clean_metadata[f"{key}_str"] = str(value)[:100]
                else:
                    clean_metadata[f"{key}_str"] = str(value)[:100]
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ fallback –ø–∞–º—è—Ç—å
        self.simple_memory.store(episode_id, content, clean_metadata)
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ ChromaDB (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if not self.use_fallback and self.collection is not None:
            try:
                if self.encoder is not None:
                    # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    embedding = self.encoder.encode(content).tolist()
                    
                    self.collection.add(
                        embeddings=[embedding],
                        documents=[content],
                        metadatas=[clean_metadata],
                        ids=[episode_id]
                    )
                else:
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    self.collection.add(
                        documents=[content],
                        metadatas=[clean_metadata],
                        ids=[episode_id]
                    )
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ ChromaDB: {e}")
        
        return episode_id
    
    def retrieve_similar(self, 
                        query: str, 
                        n_results: int = 5) -> List[Dict[str, Any]]:
        """–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —ç–ø–∏–∑–æ–¥—ã"""
        
        # –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if not self.use_fallback and self.collection is not None and self.encoder is not None:
            try:
                query_embedding = self.encoder.encode(query).tolist()
                results = self.collection.query(
                    query_embeddings=[query_embedding],
                    n_results=n_results
                )
                
                similar_episodes = []
                if results['documents'] and results['documents'][0]:
                    for i, doc in enumerate(results['documents'][0]):
                        similar_episodes.append({
                            'id': results['ids'][0][i],
                            'content': doc,
                            'metadata': results['metadatas'][0][i],
                            'distance': results['distances'][0][i] if 'distances' in results else 0
                        })
                
                return similar_episodes
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        
        # Fallback: –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
        return self.simple_memory.search_simple(query, n_results)
    
    def get_recent_episodes(self, count: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —ç–ø–∏–∑–æ–¥—ã"""
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ ChromaDB
        if not self.use_fallback and self.collection is not None:
            try:
                results = self.collection.get(
                    limit=count,
                    include=['documents', 'metadatas']
                )
                
                recent_episodes = []
                if results['documents']:
                    for i, doc in enumerate(results['documents']):
                        recent_episodes.append({
                            'id': results['ids'][i],
                            'content': doc,
                            'metadata': results['metadatas'][i]
                        })
                
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                recent_episodes.sort(
                    key=lambda x: x['metadata'].get('timestamp', ''),
                    reverse=True
                )
                
                return recent_episodes[:count]
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ ChromaDB: {e}")
        
        # Fallback
        return self.simple_memory.retrieve_recent(count)
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏"""
        stats = {
            "mode": "fallback" if self.use_fallback else "chromadb",
            "encoder_ready": self.encoder is not None,
            "encoder_loading": self.encoder_loading,
            "local_episodes": len(self.simple_memory.episodes)
        }
        
        if not self.use_fallback and self.collection is not None:
            try:
                count_result = self.collection.count()
                stats["chromadb_episodes"] = count_result
            except:
                stats["chromadb_episodes"] = "unknown"
        
        return stats 