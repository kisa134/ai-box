#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ AIbox –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ
"""

import asyncio
import signal
import sys
import os
from autonomous_agent import AutonomousAgent

class LocalAgentRunner:
    """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ"""
    
    def __init__(self):
        self.agent = None
        self.running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"""
        print("ü§ñ AIbox Local Agent")
        print("=" * 50)
        
        try:
            # –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
            print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
            self.agent = AutonomousAgent("AIbox Local Agent", "agent_data")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")
            self.agent.initialize_modules()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
            print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...")
            self.agent.initialize_agent()
            
            print("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
            status = self.agent.get_status_report()
            print(f"üìä –°—Ç–∞—Ç—É—Å: {status.get('consciousness_cycles', 0)} —Ü–∏–∫–ª–æ–≤ —Å–æ–∑–Ω–∞–Ω–∏—è")
            
            # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è
            self.running = True
            print("üß† –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è...")
            print("üí° –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è
            consciousness_task = asyncio.create_task(
                self.agent.run_consciousness_cycle()
            )
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            while self.running:
                try:
                    await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
                    status = self.agent.get_status_report()
                    print(f"üìä –¶–∏–∫–ª–æ–≤ —Å–æ–∑–Ω–∞–Ω–∏—è: {status.get('consciousness_cycles', 0)}")
                    
                except KeyboardInterrupt:
                    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                    break
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    await asyncio.sleep(5)
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
            print("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞...")
            self.agent.stop()
            consciousness_task.cancel()
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"""
        self.running = False
        print("üõë –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    runner = LocalAgentRunner()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        print(f"\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        runner.stop()
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await runner.start()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        print("‚úÖ –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ AIbox –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Ollama
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama...")
    try:
        import subprocess
        result = subprocess.run(['ollama', 'list'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
            for line in result.stdout.strip().split('\n')[1:]:  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if line.strip():
                    print(f"   {line.strip()}")
        else:
            print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama: {e}")
    
    print("\nüéØ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞...")
    asyncio.run(main()) 