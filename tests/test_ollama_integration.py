#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Ollama –¥–ª—è AIbox
"""

import asyncio
import os
import sys
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.ollama_module import (
    OllamaClient, 
    ReasoningOrchestrator, 
    ModelType, 
    ReasoningRequest,
    ResourceMonitor,
    ExplainabilityLogger
)
from core.subconscious_module import SubconsciousModule

async def test_ollama_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama"""
    print("üîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama")
    print("=" * 50)
    
    client = OllamaClient()
    
    try:
        await client.initialize()
        
        if client.available_models:
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {list(client.available_models.keys())}")
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            test_prompt = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
            result = await client.generate_response(
                prompt=test_prompt,
                model_name=list(client.available_models.keys())[0]
            )
            
            if result["success"]:
                print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                print(f"   –ú–æ–¥–µ–ª—å: {result['model']}")
                print(f"   –í—Ä–µ–º—è: {result['processing_time']:.2f}—Å")
                print(f"   –û—Ç–≤–µ—Ç: {result['content'][:100]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result['content']}")
        else:
            print("‚ö†Ô∏è Ollama –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –º–æ–¥–µ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ollama pull mistral:latest")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω: ollama serve")

async def test_reasoning_orchestrator():
    """–¢–µ—Å—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ reasoning"""
    print("\nüß† –¢–µ—Å—Ç Reasoning Orchestrator")
    print("=" * 50)
    
    orchestrator = ReasoningOrchestrator()
    
    try:
        await orchestrator.initialize()
        
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ reasoning
        test_requests = [
            ReasoningRequest(
                prompt="–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ?",
                model_type=ModelType.REASONING,
                context={"emotional_state": "curious"}
            ),
            ReasoningRequest(
                prompt="–ö–∞–∫ —è —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é?",
                model_type=ModelType.REFLECTION,
                context={"current_goal": "—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ"}
            ),
            ReasoningRequest(
                prompt="–°–æ–∑–¥–∞–π –∏—Å—Ç–æ—Ä–∏—é –æ —Ä–æ–±–æ—Ç–µ",
                model_type=ModelType.CREATIVE,
                context={"emotional_state": "excited"}
            )
        ]
        
        for i, request in enumerate(test_requests, 1):
            print(f"\n{i}. –¢–µ—Å—Ç {request.model_type.value}:")
            print(f"   –ü—Ä–æ–º–ø—Ç: {request.prompt}")
            
            request_id = await orchestrator.submit_reasoning_request(request)
            response = await orchestrator.get_reasoning_response(request_id)
            
            if response:
                print(f"   ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                print(f"   –ú–æ–¥–µ–ª—å: {response.model_used}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
                print(f"   –í—Ä–µ–º—è: {response.processing_time:.2f}—Å")
                print(f"   –û—Ç–≤–µ—Ç: {response.content[:150]}...")
                
                if response.reasoning_chain:
                    print(f"   –¶–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π: {len(response.reasoning_chain)} —à–∞–≥–æ–≤")
            else:
                print(f"   ‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

async def test_subconscious_module():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è"""
    print("\nüåô –¢–µ—Å—Ç –º–æ–¥—É–ª—è –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è")
    print("=" * 50)
    
    orchestrator = ReasoningOrchestrator()
    subconscious = SubconsciousModule("–¢–µ—Å—Ç–æ–≤—ã–π –ê–≥–µ–Ω—Ç")
    
    try:
        await subconscious.initialize(orchestrator)
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã—Ö –º—ã—Å–ª–µ–π
        test_thoughts = [
            ("–Ø –¥—É–º–∞—é –æ –ø—Ä–∏—Ä–æ–¥–µ —Å–æ–∑–Ω–∞–Ω–∏—è", "analysis"),
            ("–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º—ã—à–ª–µ–Ω–∏–µ", "reflection"),
            ("–•–æ—á—É —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ", "creative"),
            ("–í—Å–ø–æ–º–∏–Ω–∞—é –≤–∞–∂–Ω—ã–π –æ–ø—ã—Ç", "memory")
        ]
        
        for content, thought_type in test_thoughts:
            print(f"\nüí≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—ã—Å–ª–∏: {content}")
            await subconscious.process_conscious_thought(content, thought_type)
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è
        state = subconscious.get_subconscious_state()
        print(f"\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è:")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π: {state['active_thoughts']}")
        print(f"   –ò–Ω—Ç—É–∏—Ü–∏–π: {state['intuitions_generated']}")
        print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {state['patterns_discovered']}")
        print(f"   –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤: {state['emotional_insights']}")
        
        if state['recent_intuitions']:
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω—Ç—É–∏—Ü–∏–∏: {len(state['recent_intuitions'])}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è: {e}")

async def test_resource_monitoring():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    print("\nüíª –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤")
    print("=" * 50)
    
    monitor = ResourceMonitor()
    
    try:
        resources = monitor.get_system_resources()
        
        print(f"üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:")
        print(f"   CPU: {resources.get('cpu_percent', 0):.1f}%")
        print(f"   RAM: {resources.get('ram_percent', 0):.1f}%")
        print(f"   RAM –¥–æ—Å—Ç—É–ø–Ω–æ: {resources.get('ram_available_gb', 0):.1f} GB")
        
        gpu_info = resources.get('gpu', {})
        if gpu_info:
            print(f"   GPU: {gpu_info.get('gpu_name', 'Unknown')}")
            print(f"   GPU –∑–∞–≥—Ä—É–∑–∫–∞: {gpu_info.get('gpu_load', 0):.1f}%")
            print(f"   GPU –ø–∞–º—è—Ç—å: {gpu_info.get('gpu_memory_percent', 0):.1f}%")
            print(f"   GPU –ø–∞–º—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ: {gpu_info.get('gpu_memory_available', 0):.1f} GB")
            
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            can_load_mistral = monitor.can_load_model(8)  # 8GB –¥–ª—è Mistral
            can_load_mixtral = monitor.can_load_model(24)  # 24GB –¥–ª—è Mixtral
            
            print(f"   –ú–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å Mistral: {'‚úÖ' if can_load_mistral else '‚ùå'}")
            print(f"   –ú–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å Mixtral: {'‚úÖ' if can_load_mixtral else '‚ùå'}")
        else:
            print("   GPU: –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

async def test_explainability_logging():
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è explainability"""
    print("\nüìù –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è explainability")
    print("=" * 50)
    
    logger = ExplainabilityLogger("test_reasoning_logs.jsonl")
    
    try:
        # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
        from core.ollama_module import ReasoningResponse
        
        test_request = ReasoningRequest(
            prompt="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
            model_type=ModelType.REASONING
        )
        
        test_response = ReasoningResponse(
            content="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
            model_used="test_model",
            reasoning_chain=["–®–∞–≥ 1", "–®–∞–≥ 2"],
            confidence=0.8,
            processing_time=1.5,
            vram_used=0.5,
            explanation={"test": "data"}
        )
        
        # –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        logger.log_reasoning_request(test_request, test_response)
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏
        logs = logger.get_recent_logs(10)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(logs)} –ª–æ–≥–æ–≤")
        
        if logs:
            latest_log = logs[-1]
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥: {latest_log['timestamp']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

async def test_model_switching():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    print("\nüîÑ –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
    print("=" * 50)
    
    orchestrator = ReasoningOrchestrator()
    
    try:
        await orchestrator.initialize()
        
        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        test_scenarios = [
            {
                "name": "–ë—ã—Å—Ç—Ä–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
                "request": ReasoningRequest(
                    prompt="–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å",
                    model_type=ModelType.FAST,
                    priority=9
                )
            },
            {
                "name": "–ì–ª—É–±–æ–∫–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è",
                "request": ReasoningRequest(
                    prompt="–ì–ª—É–±–æ–∫–∞—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è",
                    model_type=ModelType.REFLECTION,
                    priority=8
                )
            },
            {
                "name": "–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞",
                "request": ReasoningRequest(
                    prompt="–°–æ–∑–¥–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∏–¥–µ—é",
                    model_type=ModelType.CREATIVE,
                    priority=7
                )
            }
        ]
        
        for scenario in test_scenarios:
            print(f"\nüéØ {scenario['name']}:")
            
            request_id = await orchestrator.submit_reasoning_request(scenario['request'])
            response = await orchestrator.get_reasoning_response(request_id)
            
            if response:
                print(f"   ‚úÖ –ú–æ–¥–µ–ª—å: {response.model_used}")
                print(f"   –í—Ä–µ–º—è: {response.processing_time:.2f}—Å")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
            else:
                print(f"   ‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Ollama –¥–ª—è AIbox")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"   Ollama URL: http://localhost:11434")
    print(f"   –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    await test_ollama_connection()
    await test_resource_monitoring()
    await test_reasoning_orchestrator()
    await test_subconscious_module()
    await test_explainability_logging()
    await test_model_switching()
    
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω: ollama serve")
    print("2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª–∏: ollama pull mistral:latest")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π")
    print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env")

if __name__ == "__main__":
    asyncio.run(main()) 