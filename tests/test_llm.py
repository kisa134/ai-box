#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è AIbox –∞–≥–µ–Ω—Ç–∞
"""

import os
from core.llm_module import LLMModule, OpenAILLM, LocalLLM
from config import Config

def test_llm_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print("üß† –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π")
    print("=" * 50)
    
    # –¢–µ—Å—Ç OpenAI
    print("\n1. –¢–µ—Å—Ç OpenAI LLM:")
    openai_llm = OpenAILLM()
    if openai_llm.is_available():
        print("‚úÖ OpenAI –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        response = openai_llm.generate_response("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        print(f"   –û—Ç–≤–µ—Ç: {response[:100]}...")
    else:
        print("‚ùå OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY)")
    
    # –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    print("\n2. –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏:")
    try:
        local_llm = LocalLLM()
        if local_llm.is_available():
            print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            response = local_llm.generate_response("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            print(f"   –û—Ç–≤–µ—Ç: {response[:100]}...")
        else:
            print("‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
    
    # –¢–µ—Å—Ç LLM –º–æ–¥—É–ª—è
    print("\n3. –¢–µ—Å—Ç LLM –º–æ–¥—É–ª—è:")
    llm_module = LLMModule(llm_type="openai")
    if llm_module.is_available():
        print("‚úÖ LLM –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å OpenAI")
    else:
        print("‚ö†Ô∏è LLM –º–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback")
    
    llm_module_local = LLMModule(llm_type="local")
    if llm_module_local.is_available():
        print("‚úÖ LLM –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é")
    else:
        print("‚ö†Ô∏è LLM –º–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏")

def test_agent_with_llm():
    """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ —Å LLM"""
    print("\nü§ñ –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ —Å LLM")
    print("=" * 50)
    
    from autonomous_agent import AutonomousAgent
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
    agent = AutonomousAgent("–¢–µ—Å—Ç–æ–≤—ã–π –ê–≥–µ–Ω—Ç", "agent_data")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
    test_questions = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ",
        "–ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ —Å–æ–∑–Ω–∞–Ω–∏–∏?",
        "–ö–∞–∫ —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è?",
        "–ß–µ–º —Ç—ã –æ—Ç–ª–∏—á–∞–µ—à—å—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º?"
    ]
    
    print("\nüí¨ –¢–µ—Å—Ç –¥–∏–∞–ª–æ–≥–∞:")
    for i, question in enumerate(test_questions, 1):
        print(f"\n{i}. –í–æ–ø—Ä–æ—Å: {question}")
        response = agent.process_input(question)
        print(f"   –û—Ç–≤–µ—Ç: {response[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
        if len(response) > 50 and not response.startswith("–ò–∑–≤–∏–Ω–∏—Ç–µ"):
            print("   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
        else:
            print("   ‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, fallback)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è AIbox")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    if Config.validate_config():
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
    test_llm_availability()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ —Å LLM
    test_agent_with_llm()
    
    print("\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main() 