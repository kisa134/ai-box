#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç AIbox –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import time
from autonomous_agent import AutonomousAgent

class InteractiveAgentTester:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.agent = None
        self.test_questions = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ?",
            "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö",
            "–ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ—è –ø–∞–º—è—Ç—å?",
            "–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ü–µ–ª–∏?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ?",
            "–ö–∞–∫ —Ç—ã —É—á–∏—à—å—Å—è?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–∏"
        ]
    
    async def initialize_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AIbox –∞–≥–µ–Ω—Ç–∞...")
        
        try:
            self.agent = AutonomousAgent("Interactive Test Agent", "test_data")
            
            print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")
            self.agent.initialize_modules()
            
            print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...")
            self.agent.initialize_agent()
            
            print("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def run_automated_tests(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("\nü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤...")
        print("=" * 50)
        
        for i, question in enumerate(self.test_questions, 1):
            print(f"\nüéØ –¢–µ—Å—Ç {i}/{len(self.test_questions)}")
            print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
            
            try:
                start_time = time.time()
                response = await self.agent.process_input(question)
                response_time = time.time() - start_time
                
                print(f"ü§ñ –û—Ç–≤–µ—Ç ({response_time:.2f}—Å):")
                print(f"   {response}")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
                status = self.agent.get_status_report()
                print(f"üìä –°—Ç–∞—Ç—É—Å: {status.get('consciousness_cycles', 0)} —Ü–∏–∫–ª–æ–≤ —Å–æ–∑–Ω–∞–Ω–∏—è")
                
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
    
    async def run_interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print("\nüí¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
        print("–í–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("=" * 50)
        
        while True:
            try:
                user_input = input("\nüë§ –í—ã: ")
                
                if user_input.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                if not user_input.strip():
                    continue
                
                print("ü§î –ê–≥–µ–Ω—Ç –¥—É–º–∞–µ—Ç...")
                start_time = time.time()
                
                response = await self.agent.process_input(user_input)
                response_time = time.time() - start_time
                
                print(f"ü§ñ AIbox ({response_time:.2f}—Å): {response}")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if "—Å–æ–∑–Ω–∞–Ω–∏–µ" in user_input.lower() or "—Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ" in user_input.lower():
                    status = self.agent.get_status_report()
                    print(f"üìä –¶–∏–∫–ª–æ–≤ —Å–æ–∑–Ω–∞–Ω–∏—è: {status.get('consciousness_cycles', 0)}")
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def show_agent_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
        print("\nüìä –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞:")
        print("=" * 30)
        
        status = self.agent.get_status_report()
        
        print(f"üß† –¶–∏–∫–ª–æ–≤ —Å–æ–∑–Ω–∞–Ω–∏—è: {status.get('consciousness_cycles', 0)}")
        print(f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π: {len(status.get('active_goals', []))}")
        print(f"üíæ –≠–ø–∏–∑–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {status.get('episodes_in_memory', 0)}")
        print(f"üå≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π: {status.get('active_thoughts', 0)}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª—è—Ö
        print("\nüìã –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π:")
        modules = ['memory', 'goals', 'inner_state', 'world_model', 'thought_tree', 'self_model', 'reasoning_orchestrator', 'subconscious']
        
        for module in modules:
            available = self.agent.is_module_available(module)
            status_icon = "‚úÖ" if available else "‚ùå"
            print(f"   {status_icon} {module}: {'–î–æ—Å—Ç—É–ø–µ–Ω' if available else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = InteractiveAgentTester()
    
    print("ü§ñ AIbox Interactive Agent Tester")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if not await tester.initialize_agent():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞")
        return
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
    await tester.show_agent_status()
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    print("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")
    print("2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    print("3. –û–±–∞ —Ä–µ–∂–∏–º–∞")
    
    try:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            await tester.run_automated_tests()
        elif choice == "2":
            await tester.run_interactive_mode()
        elif choice == "3":
            await tester.run_automated_tests()
            await tester.run_interactive_mode()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

if __name__ == "__main__":
    asyncio.run(main()) 