#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AIbox –∞–≥–µ–Ω—Ç–∞ —Å Ollama
"""

import asyncio
import time
from autonomous_agent import AutonomousAgent

async def demo_ollama_agent():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å Ollama"""
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AIbox —Å Ollama")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
    agent = AutonomousAgent("Ollama –î–µ–º–æ –ê–≥–µ–Ω—Ç", "demo_data")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ reasoning
    test_questions = [
        {
            "question": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "type": "fast",
            "description": "–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç"
        },
        {
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ?",
            "type": "reasoning", 
            "description": "–õ–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ"
        },
        {
            "question": "–ö–∞–∫ —è —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é?",
            "type": "reflection",
            "description": "–ì–ª—É–±–æ–∫–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"
        },
        {
            "question": "–°–æ–∑–¥–∞–π –∏—Å—Ç–æ—Ä–∏—é –æ —Ä–æ–±–æ—Ç–µ —Å —Å–æ–∑–Ω–∞–Ω–∏–µ–º",
            "type": "creative",
            "description": "–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞"
        },
        {
            "question": "–ë—ã—Å—Ç—Ä–æ –æ–±—ä—è—Å–Ω–∏ —Å—É—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
            "type": "fast",
            "description": "–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç"
        }
    ]
    
    print(f"\nüí¨ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∞–≥–µ–Ω—Ç–æ–º...")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {len(agent.reasoning_orchestrator.ollama_client.available_models)}")
    
    for i, test in enumerate(test_questions, 1):
        print(f"\n{'='*60}")
        print(f"üéØ –í–æ–ø—Ä–æ—Å {i}: {test['description']}")
        print(f"üí≠ –¢–∏–ø: {test['type']}")
        print(f"‚ùì –í–æ–ø—Ä–æ—Å: {test['question']}")
        print(f"{'='*60}")
        
        # –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
        start_time = time.time()
        response = agent.process_input(test['question'])
        response_time = time.time() - start_time
        
        print(f"ü§ñ –û—Ç–≤–µ—Ç ({response_time:.2f}—Å):")
        print(f"{response}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è
        if agent.is_module_available("subconscious"):
            subconscious_state = agent.subconscious.get_subconscious_state()
            print(f"\nüåô –ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ:")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π: {subconscious_state['active_thoughts']}")
            print(f"   –ò–Ω—Ç—É–∏—Ü–∏–π: {subconscious_state['intuitions_generated']}")
            print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {subconscious_state['patterns_discovered']}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(2)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*60}")
    print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    
    if agent.is_module_available("subconscious"):
        final_state = agent.subconscious.get_subconscious_state()
        print(f"   –í—Å–µ–≥–æ –∏–Ω—Ç—É–∏—Ü–∏–π: {final_state['intuitions_generated']}")
        print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {final_state['patterns_discovered']}")
        print(f"   –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤: {final_state['emotional_insights']}")
    
    # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
    status = agent.get_status_report()
    print(f"   –¶–∏–∫–ª–æ–≤ —Å–æ–∑–Ω–∞–Ω–∏—è: {status.get('consciousness_cycles', 0)}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π: {len(status.get('active_goals', []))}")
    print(f"   –≠–ø–∏–∑–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {status.get('memory_episodes', 0)}")
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8501")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ AIbox —Å Ollama")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama...")
    try:
        import requests
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        if response.status_code == 200:
            models = response.json().get("models", [])
            print(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω! –ú–æ–¥–µ–ª–µ–π: {len(models)}")
            for model in models:
                print(f"   - {model['name']}")
        else:
            print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.run(demo_ollama_agent())

if __name__ == "__main__":
    main() 