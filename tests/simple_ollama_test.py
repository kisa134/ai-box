#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Ollama –¥–ª—è AIbox
"""

import asyncio
import time
from core.ollama_module import OllamaClient, ReasoningOrchestrator, ModelType, ReasoningRequest

async def test_ollama_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Ollama"""
    
    print("üöÄ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Ollama")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
    client = OllamaClient()
    await client.initialize()
    
    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {list(client.available_models.keys())}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        ("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", ModelType.FAST),
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ?", ModelType.REASONING),
        ("–ö–∞–∫ —è —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é?", ModelType.REFLECTION),
        ("–°–æ–∑–¥–∞–π –∏—Å—Ç–æ—Ä–∏—é –æ —Ä–æ–±–æ—Ç–µ", ModelType.CREATIVE)
    ]
    
    for i, (question, model_type) in enumerate(test_questions, 1):
        print(f"\n{'='*60}")
        print(f"üéØ –í–æ–ø—Ä–æ—Å {i}: {question}")
        print(f"üí≠ –¢–∏–ø: {model_type.value}")
        print(f"{'='*60}")
        
        # –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å
        request = ReasoningRequest(
            prompt=question,
            model_type=model_type,
            context={},
            priority=8,
            require_explanation=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é
        start_time = time.time()
        result = await client.generate_response(
            prompt=request.prompt,
            model_name="phi3:latest",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º phi3 –¥–ª—è —Ç–µ—Å—Ç–∞
            temperature=0.7
        )
        response_time = time.time() - start_time
        
        if result and result.get('success'):
            print(f"ü§ñ –û—Ç–≤–µ—Ç ({response_time:.2f}—Å):")
            print(f"–ú–æ–¥–µ–ª—å: {result.get('model', 'unknown')}")
            print(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.2f}—Å")
            print(f"–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result.get('tokens_used', 0)}")
            print(f"\n–û—Ç–≤–µ—Ç:\n{result.get('content', '')[:500]}...")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
            print(f"–û—à–∏–±–∫–∞: {result.get('content', 'Unknown error')}")
        
        await asyncio.sleep(1)
    
    print(f"\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    # –ó–∞–∫—Ä—ã—Ç—å –∫–ª–∏–µ–Ω—Ç
    await client.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∞ Ollama")
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å async —Ç–µ—Å—Ç
    asyncio.run(test_ollama_direct())

if __name__ == "__main__":
    main() 