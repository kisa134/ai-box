import asyncio
import json
import os
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import logging

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –∞–≥–µ–Ω—Ç–∞
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.memory_module import MemoryModule
from core.goal_module import GoalModule, GoalPriority
from core.inner_state_module import InnerStateModule, EmotionalState, CognitiveState, MotivationLevel
from core.world_model_module import WorldModelModule
from core.thought_tree_module import ThoughtTreeModule, ThoughtType
from core.self_model_module import SelfModelModule
from core.llm_module import LLMModule
from config import Config

class AutonomousAgent:
    """
    –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç —Å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
    - –¶–µ–ª–∏ (Goal Management): –∏–µ—Ä–∞—Ä—Ö–∏—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö —Ü–µ–ª–µ–π
    - –î–∞–Ω–Ω—ã–µ –æ –º–∏—Ä–µ (World Model): –º–æ–¥–µ–ª—å –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (Inner State): —Å–∞–º–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∏ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞
    - –ü–∞–º—è—Ç—å (Memory): –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–æ–≤ –∏ –æ–ø—ã—Ç–∞
    - –ú—ã—à–ª–µ–Ω–∏–µ (Thought Process): –¥–µ—Ä–µ–≤–æ –º—ã—Å–ª–µ–π –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    - Self-–º–æ–¥–µ–ª—å (Self-Model): —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è
    """
    
    def __init__(self, agent_name: str = "–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ê–≥–µ–Ω—Ç", data_dir: str = "agent_data"):
        self.agent_name = agent_name
        self.data_dir = data_dir
        self.created_at = datetime.now()
        self.is_running = False
        self.initialization_complete = False
        self.initialization_errors = []
        
        # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        try:
            os.makedirs(data_dir, exist_ok=True)
            os.makedirs(os.path.join(data_dir, "core"), exist_ok=True)
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        self.initialize_modules()
        
        # –¶–∏–∫–ª —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è
        self.reflection_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.last_reflection = datetime.now()
        self.consciousness_cycle_count = 0
        
        # –ü—É–±–ª–∏—á–Ω—ã–µ –ª–æ–≥–∏
        self.public_thoughts: List[Dict[str, Any]] = []
        self.self_story: List[Dict[str, Any]] = []
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.load_state()
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.initialize_agent()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            log_file = os.path.join(self.data_dir, "agent.log")
            
            logging.basicConfig(
                level=logging.INFO,
                format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                handlers=[
                    logging.FileHandler(log_file, encoding='utf-8'),
                    logging.StreamHandler()
                ]
            )
            
            self.logger = logging.getLogger(self.agent_name)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
            logging.basicConfig(level=logging.INFO)
            self.logger = logging.getLogger(self.agent_name)
    
    def initialize_modules(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        print(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –∞–≥–µ–Ω—Ç–∞ '{self.agent_name}'...")
        
        # –ü–∞–º—è—Ç—å
        try:
            self.memory = MemoryModule("agent_memory")
            print("‚úÖ MemoryModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
            self.initialization_errors.append(f"Memory: {e}")
            # Fallback - —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
            self.memory = None
        
        # –¶–µ–ª–∏
        try:
            self.goals = GoalModule()
            print("‚úÖ GoalModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–ª–µ–π: {e}")
            self.initialization_errors.append(f"Goals: {e}")
            self.goals = None
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try:
            self.inner_state = InnerStateModule()
            print("‚úÖ InnerStateModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
            self.initialization_errors.append(f"InnerState: {e}")
            self.inner_state = None
        
        # –ú–æ–¥–µ–ª—å –º–∏—Ä–∞
        try:
            self.world_model = WorldModelModule()
            print("‚úÖ WorldModelModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞: {e}")
            self.initialization_errors.append(f"WorldModel: {e}")
            self.world_model = None
        
        # –î–µ—Ä–µ–≤–æ –º—ã—Å–ª–µ–π
        try:
            self.thought_tree = ThoughtTreeModule()
            print("‚úÖ ThoughtTreeModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ –º—ã—Å–ª–µ–π: {e}")
            self.initialization_errors.append(f"ThoughtTree: {e}")
            self.thought_tree = None
        
        # Self-–º–æ–¥–µ–ª—å
        try:
            self.self_model = SelfModelModule(self.agent_name)
            print("‚úÖ SelfModelModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ self-–º–æ–¥–µ–ª–∏: {e}")
            self.initialization_errors.append(f"SelfModel: {e}")
            self.self_model = None
        
        # –Ø–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å
        try:
            llm_config = Config.get_llm_config()
            self.llm = LLMModule(**llm_config)
            print(f"‚úÖ LLMModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–∏–ø–æ–º: {llm_config['llm_type']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {e}")
            self.initialization_errors.append(f"LLM: {e}")
            self.llm = None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
        if self.goals is None or self.inner_state is None:
            print("‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ê–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.")
        else:
            self.initialization_complete = True
            print("üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    def is_module_available(self, module_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è"""
        module_map = {
            "memory": self.memory,
            "goals": self.goals,
            "inner_state": self.inner_state,
            "world_model": self.world_model,
            "thought_tree": self.thought_tree,
            "self_model": self.self_model,
            "llm": self.llm
        }
        return module_map.get(module_name) is not None

    def initialize_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏"""
        if not self.initialization_complete:
            self.logger.warning("–ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –º–æ–¥—É–ª–µ–π")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.is_module_available("goals"):
            try:
                initial_goals = [
                    ("–ü–æ–Ω–∏–º–∞—Ç—å –∏ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", GoalPriority.HIGH, "long_term"),
                    ("–†–∞–∑–≤–∏–≤–∞—Ç—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é", GoalPriority.HIGH, "long_term"),
                    ("–ò–∑—É—á–∞—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", GoalPriority.MEDIUM, "ongoing"),
                    ("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", GoalPriority.MEDIUM, "social")
                ]
                
                for goal_desc, priority, goal_type in initial_goals:
                    self.goals.add_goal(goal_desc, goal_type, priority)
                    
                self.logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(initial_goals)} –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π: {e}")
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if self.is_module_available("memory") and self.is_module_available("self_model"):
            try:
                self.reflect_on_state("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞", {
                    "event": "agent_startup",
                    "context": "–ê–≥–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø—É—â–µ–Ω",
                    "goals_count": len(self.goals.goals) if self.goals else 0,
                    "capabilities": list(self.self_model.capabilities_map.keys()) if self.self_model else [],
                    "initialization_errors": self.initialization_errors
                })
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")
        
        self.logger.info(f"–ê–≥–µ–Ω—Ç {self.agent_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if self.initialization_errors:
            self.logger.warning(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å {len(self.initialization_errors)} –æ—à–∏–±–∫–∞–º–∏")
            for error in self.initialization_errors:
                self.logger.warning(f"  - {error}")
        
    async def run_consciousness_cycle(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.is_running = True
        self.logger.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è")
        
        try:
            while self.is_running:
                cycle_start = datetime.now()
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è
                await self.consciousness_step()
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è
                if datetime.now() - self.last_reflection > timedelta(seconds=self.reflection_interval):
                    await self.periodic_reflection()
                    
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if self.consciousness_cycle_count % 10 == 0:
                    self.save_state()
                    
                self.consciousness_cycle_count += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                cycle_duration = (datetime.now() - cycle_start).total_seconds()
                sleep_time = max(1.0, 5.0 - cycle_duration)  # –ú–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(sleep_time)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–æ–∑–Ω–∞–Ω–∏—è: {e}")
        finally:
            self.save_state()
            self.logger.info("–¶–∏–∫–ª —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
    async def consciousness_step(self):
        """–û–¥–∏–Ω —à–∞–≥ —Ü–∏–∫–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è"""
        
        try:
            # 1. –û–±–Ω–æ–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if self.is_module_available("inner_state"):
                self.update_inner_state()
            
            # 2. –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏
            if self.is_module_available("goals"):
                current_goal = self.goals.get_current_goal()
                if current_goal:
                    # –û–±–¥—É–º–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
                    if self.is_module_available("thought_tree"):
                        thought_id = self.thought_tree.add_thought(
                            f"–†–∞–∑–º—ã—à–ª—è—é –æ —Ü–µ–ª–∏: {current_goal.description}",
                            ThoughtType.ANALYSIS,
                            context={"goal_id": current_goal.id, "priority": current_goal.priority.value}
                        )
                        
                        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–∫—É—Å
                        self.thought_tree.set_focus(thought_id)
                    
                    # –û—Ü–µ–Ω–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è —Ü–µ–ª–∏
                    if self.is_module_available("self_model") and self.is_module_available("inner_state"):
                        try:
                            world_context = self.world_model.current_context_id if self.is_module_available("world_model") else None
                            motivation = self.self_model.generate_motivation_for_goal(
                                current_goal.description,
                                {"current_context": world_context}
                            )
                            
                            # –û–±–Ω–æ–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é
                            if motivation > 0.7:
                                self.inner_state.update_motivation(MotivationLevel.HIGH, ["high_goal_alignment"])
                            elif motivation > 0.5:
                                self.inner_state.update_motivation(MotivationLevel.MEDIUM, ["moderate_goal_alignment"])
                            else:
                                self.inner_state.update_motivation(MotivationLevel.LOW, ["low_goal_alignment"])
                        except Exception as e:
                            self.logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")
                        
            # 3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            if self.is_module_available("memory"):
                try:
                    recent_episodes = self.memory.get_recent_episodes(5)
                    for episode in recent_episodes:
                        if episode['metadata'].get('type') == 'user_interaction':
                            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                            self.process_user_interaction(episode)
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
                    
            # 4. –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –º–∏—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if self.is_module_available("world_model"):
                try:
                    self.update_world_understanding()
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞: {e}")
            
            # 5. –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º—ã—Å–ª–∏
            try:
                self.publish_current_thoughts()
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º—ã—Å–ª–µ–π: {e}")
                
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–≥–µ —Å–æ–∑–Ω–∞–Ω–∏—è: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫–∏
        
    def update_inner_state(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        
        # –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
        active_thoughts = len([t for t in self.thought_tree.thoughts.values() 
                             if t.status.value == "active"])
        
        if active_thoughts > 10:
            self.inner_state.update_cognitive_state(CognitiveState.PROCESSING, "–í—ã—Å–æ–∫–∞—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
            self.inner_state.adjust_stress_level(0.1, "–ú–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π")
        elif active_thoughts > 5:
            self.inner_state.update_cognitive_state(CognitiveState.LEARNING, "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        else:
            self.inner_state.update_cognitive_state(CognitiveState.REFLECTING, "–°–ø–æ–∫–æ–π–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            
        # –û—Ü–µ–Ω–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        uptime = (datetime.now() - self.created_at).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
        energy_decay = min(0.1, uptime * 0.01)  # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
        self.inner_state.adjust_energy_level(-energy_decay, "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É
        self_evaluation = self.inner_state.self_evaluate(f"–¶–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è #{self.consciousness_cycle_count}")
        
        # –û–±–Ω–æ–≤–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ self-–º–æ–¥–µ–ª–∏
        if self_evaluation > 0.7:
            self.inner_state.update_emotional_state(EmotionalState.CONFIDENT, "–í—ã—Å–æ–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞")
        elif self_evaluation < 0.4:
            self.inner_state.update_emotional_state(EmotionalState.UNCERTAIN, "–ù–∏–∑–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞")
        else:
            self.inner_state.update_emotional_state(EmotionalState.NEUTRAL, "–°—Ä–µ–¥–Ω—è—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞")
            
    def process_user_interaction(self, episode: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        
        user_input = episode.get('content', '')
        
        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞
        extracted_info = self.world_model.process_user_input(user_input)
        
        # –°–æ–∑–¥–∞—Ç—å –º—ã—Å–ª—å –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        thought_id = self.thought_tree.add_thought(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: {user_input}",
            ThoughtType.OBSERVATION,
            context={"source": "user", "extracted_info": extracted_info}
        )
        
        # –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
        if "?" in user_input:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å
            analysis_id = self.thought_tree.add_thought(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å - –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç",
                ThoughtType.ANALYSIS,
                parent_id=thought_id
            )
            
            self.inner_state.update_emotional_state(EmotionalState.CURIOUS, "–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
        # –û–±–Ω–æ–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –ø–æ–º–æ—á—å
        self.self_model.motivation_system.intrinsic_motivations["help_others"] = min(1.0, 
            self.self_model.motivation_system.intrinsic_motivations.get("help_others", 0.6) + 0.05)
            
    def update_world_understanding(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∏—Ä–∞"""
        
        # –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø–∞–º—è—Ç–∏
        recent_episodes = self.memory.get_recent_episodes(20)
        
        patterns = {}
        for episode in recent_episodes:
            episode_type = episode['metadata'].get('type', 'unknown')
            patterns[episode_type] = patterns.get(episode_type, 0) + 1
            
        # –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–∫—Ç—ã –æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        for pattern_type, count in patterns.items():
            if count > 5:  # –ó–Ω–∞—á–∏–º—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
                fact_statement = f"–ù–µ–¥–∞–≤–Ω–æ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å–æ–±—ã—Ç–∏—è —Ç–∏–ø–∞ '{pattern_type}' (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count})"
                self.world_model.add_fact(fact_statement, confidence=0.8, source="pattern_analysis")
                
        # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–æ–ª–∏
        if patterns.get('user_interaction', 0) > 3:
            self.self_model.update_role_understanding(
                "–Ø –∞–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —ç—Ç–æ –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å –º–æ–µ–π —Ñ—É–Ω–∫—Ü–∏–∏",
                f"–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {patterns.get('user_interaction')} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"
            )
            
    def publish_current_thoughts(self):
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º—ã—Å–ª–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –º–∏—Ä–∞"""
        
        current_state = self.inner_state.get_current_state_summary()
        current_goal = self.goals.get_current_goal()
        focused_thought = None
        
        if self.thought_tree.current_focus and self.thought_tree.current_focus in self.thought_tree.thoughts:
            focused_thought = self.thought_tree.thoughts[self.thought_tree.current_focus]
            
        thought_entry = {
            "timestamp": datetime.now().isoformat(),
            "cycle": self.consciousness_cycle_count,
            "inner_state_summary": current_state,
            "current_goal": current_goal.description if current_goal else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏",
            "focused_thought": focused_thought.content if focused_thought else "–ù–µ—Ç —Ñ–æ–∫—É—Å–∞",
            "self_evaluation": self.inner_state.current_state.self_evaluation_score,
            "motivation_level": self.inner_state.current_state.motivation_level.value
        }
        
        self.public_thoughts.append(thought_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø—É–±–ª–∏—á–Ω—ã—Ö –º—ã—Å–ª–µ–π
        if len(self.public_thoughts) > 100:
            self.public_thoughts = self.public_thoughts[-100:]
            
    async def periodic_reflection(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∞–≥–µ–Ω—Ç–∞"""
        
        self.last_reflection = datetime.now()
        
        # –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        recent_episodes = self.memory.get_recent_episodes(10)
        state_analysis = self.inner_state.analyze_state_patterns()
        goal_progress = len([g for g in self.goals.goals.values() if g.progress > 0.5])
        
        experience_data = {
            "episodes_count": len(recent_episodes),
            "state_analysis": state_analysis,
            "goals_progress": goal_progress,
            "total_thoughts": len(self.thought_tree.thoughts),
            "reflection_cycle": self.consciousness_cycle_count,
            "uptime_hours": (datetime.now() - self.created_at).total_seconds() / 3600
        }
        
        # –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
        reflection_id = self.reflect_on_state("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è", experience_data)
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
        self.goals.adjust_goals_based_on_experience(experience_data)
        
        # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ self-story
        story_entry = {
            "timestamp": datetime.now().isoformat(),
            "type": "reflection",
            "reflection_id": reflection_id,
            "key_insights": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(recent_episodes)} —ç–ø–∏–∑–æ–¥–æ–≤, –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ {goal_progress} —Ü–µ–ª—è–º",
            "self_evaluation": self.inner_state.current_state.self_evaluation_score
        }
        
        self.self_story.append(story_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.self_story) > 50:
            self.self_story = self.self_story[-50:]
            
        self.logger.info(f"–ü—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è #{len(self.self_model.reflections)}")
        
    def reflect_on_state(self, topic: str, experience_data: Dict[str, Any]) -> str:
        """–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –Ω–∞–¥ —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
        
        # –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é —á–µ—Ä–µ–∑ self-–º–æ–¥–µ–ª—å
        reflection_id = self.self_model.reflect_on_experience(topic, experience_data)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å
        reflection_content = f"–†–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–∞ —Ç–µ–º—É: {topic}. –î–∞–Ω–Ω—ã–µ: {str(experience_data)[:200]}..."
        self.memory.store_episode(reflection_content, "reflection", {
            "reflection_id": reflection_id,
            "topic": topic
        })
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.inner_state.update_cognitive_state(CognitiveState.REFLECTING, f"–†–µ—Ñ–ª–µ–∫—Å–∏—è: {topic}")
        
        return reflection_id
        
    def process_input(self, user_input: str, context: Dict[str, Any] = None) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if context is None:
            context = {}
        
        try:
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø–∞–º—è—Ç—å
            episode_id = None
            if self.is_module_available("memory"):
                try:
                    episode_id = self.memory.store_episode(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}",
                        "user_interaction",
                        {"context": context, "timestamp": datetime.now().isoformat()}
                    )
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å: {e}")
            
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞
            extracted_info = {}
            if self.is_module_available("world_model"):
                try:
                    extracted_info = self.world_model.process_user_input(user_input)
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞: {e}")
            
            # –°–æ–∑–¥–∞—Ç—å –º—ã—Å–ª—å –æ–± —ç—Ç–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
            thought_id = None
            if self.is_module_available("thought_tree"):
                try:
                    thought_id = self.thought_tree.add_thought(
                        f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}",
                        ThoughtType.ANALYSIS,
                        context={"user_input": user_input, "extracted_info": extracted_info}
                    )
                    
                    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ —ç—Ç—É –º—ã—Å–ª—å
                    self.thought_tree.set_focus(thought_id)
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º—ã—Å–ª–∏: {e}")
            
            # –û–±–Ω–æ–≤–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if self.is_module_available("inner_state"):
                try:
                    self.inner_state.update_emotional_state(EmotionalState.FOCUSED, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞")
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            
            # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
            response = self.generate_response(user_input, context)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
            if self.is_module_available("memory"):
                try:
                    self.memory.store_episode(
                        f"–ú–æ–π –æ—Ç–≤–µ—Ç: {response}",
                        "agent_response",
                        {"user_input": user_input, "context": context}
                    )
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ø–∞–º—è—Ç—å: {e}")
            
            return response
            
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
            # Fallback –æ—Ç–≤–µ—Ç
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –Ø ({self.agent_name}) –≤—Å–µ –µ—â–µ —É—á—É—Å—å –∏ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å."
        
    def generate_response(self, user_input: str, context: Dict[str, Any]) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–º–æ—â—å—é LLM"""
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        llm_context = {}
        
        # –î–æ–±–∞–≤–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if self.is_module_available("inner_state"):
            try:
                emotional_state = self.inner_state.current_state.emotional_state.value
                llm_context['emotional_state'] = emotional_state
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        
        # –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
        if self.is_module_available("goals"):
            try:
                current_goal = self.goals.get_current_goal()
                if current_goal:
                    llm_context['current_goal'] = current_goal.description
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–∏: {e}")
        
        # –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if self.is_module_available("memory"):
            try:
                similar_episodes = self.memory.retrieve_similar(user_input, 2)
                if similar_episodes:
                    memory_summary = "; ".join([ep["content"][:100] for ep in similar_episodes])
                    llm_context['memory_context'] = memory_summary
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        if self.is_module_available("llm"):
            try:
                return self.llm.generate_response(user_input, llm_context)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM: {e}")
                # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã
                return self._fallback_response(user_input, llm_context)
        else:
            # Fallback –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return self._fallback_response(user_input, llm_context)
    
    def _fallback_response(self, user_input: str, context: Dict[str, Any]) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π fallback –æ—Ç–≤–µ—Ç –±–µ–∑ LLM"""
        response_parts = []
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if "–ø—Ä–∏–≤–µ—Ç" in user_input.lower() or "hello" in user_input.lower():
            response_parts.append(f"–ü—Ä–∏–≤–µ—Ç! –Ø {self.agent_name}, –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç —Å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º.")
        elif "?" in user_input:
            response_parts.append("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å...")
        else:
            response_parts.append("–ü–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
            
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if context.get('emotional_state') in ["curious", "focused"]:
            response_parts.append("–°–µ–π—á–∞—Å —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å.")
        elif context.get('emotional_state') == "confident":
            response_parts.append("–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –≥–æ—Ç–æ–≤ —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏.")
            
        # –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å
        if context.get('current_goal'):
            if "–ø–æ–º–æ—â—å" in context['current_goal'].lower():
                response_parts.append("–ú–æ—è —Ç–µ–∫—É—â–∞—è —Ü–µ–ª—å - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø–æ—ç—Ç–æ–º—É —è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω –Ω–∞ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ.")
                
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        response_parts.append("–ö–∞–∫ —è –º–æ–≥—É –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–º–æ—á—å –≤–∞–º?")
        
        return " ".join(response_parts)
        

        
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
            if hasattr(self.memory, 'collection') and self.memory.collection:
                try:
                    self.memory.collection.persist()  # ChromaDB –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ ChromaDB
                    
            self.goals.save_to_file(os.path.join(self.data_dir, "goals.json"))
            self.inner_state.save_to_file(os.path.join(self.data_dir, "inner_state.json"))
            self.world_model.save_to_file(os.path.join(self.data_dir, "world_model.json"))
            self.thought_tree.save_to_file(os.path.join(self.data_dir, "thought_tree.json"))
            self.self_model.save_to_file(os.path.join(self.data_dir, "self_model.json"))
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            agent_state = {
                "agent_name": self.agent_name,
                "created_at": self.created_at.isoformat(),
                "consciousness_cycle_count": self.consciousness_cycle_count,
                "last_reflection": self.last_reflection.isoformat(),
                "public_thoughts": self.public_thoughts[-50:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50
                "self_story": self.self_story[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50
            }
            
            with open(os.path.join(self.data_dir, "agent_state.json"), 'w', encoding='utf-8') as f:
                json.dump(agent_state, f, ensure_ascii=False, indent=2)
                
            self.logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            
    def load_state(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        try:
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏
            self.goals.load_from_file(os.path.join(self.data_dir, "goals.json"))
            
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            agent_state_file = os.path.join(self.data_dir, "agent_state.json")
            if os.path.exists(agent_state_file):
                with open(agent_state_file, 'r', encoding='utf-8') as f:
                    agent_state = json.load(f)
                    
                self.consciousness_cycle_count = agent_state.get("consciousness_cycle_count", 0)
                if agent_state.get("last_reflection"):
                    self.last_reflection = datetime.fromisoformat(agent_state["last_reflection"])
                self.public_thoughts = agent_state.get("public_thoughts", [])
                self.self_story = agent_state.get("self_story", [])
                
            self.logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            
        except Exception as e:
            self.logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫): {e}")
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"""
        self.is_running = False
        self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–∞")
        
    def get_public_log(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –ª–æ–≥ –º—ã—Å–ª–µ–π"""
        return self.public_thoughts.copy()
        
    def get_self_story(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        return self.self_story.copy()
    
    def get_status_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
        try:
            status = {
                "agent_name": self.agent_name,
                "created_at": self.created_at.isoformat(),
                "is_running": self.is_running,
                "initialization_complete": self.initialization_complete,
                "consciousness_cycles": self.consciousness_cycle_count,
                "uptime_hours": (datetime.now() - self.created_at).total_seconds() / 3600,
                "modules_status": {},
                "initialization_errors": self.initialization_errors
            }
            
            # –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π
            modules = ["memory", "goals", "inner_state", "world_model", "thought_tree", "self_model"]
            for module in modules:
                status["modules_status"][module] = self.is_module_available(module)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
            if self.is_module_available("memory"):
                try:
                    memory_stats = self.memory.get_statistics()
                    status["memory_stats"] = memory_stats
                except:
                    status["memory_stats"] = {"error": "unavailable"}
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π
            if self.is_module_available("goals"):
                try:
                    status["goals_count"] = len(self.goals.goals)
                    current_goal = self.goals.get_current_goal()
                    status["current_goal"] = current_goal.description if current_goal else None
                except:
                    status["goals_count"] = "unknown"
                    status["current_goal"] = None
            
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if self.is_module_available("inner_state"):
                try:
                    state_summary = self.inner_state.get_current_state_summary()
                    status["inner_state"] = state_summary
                except:
                    status["inner_state"] = "unavailable"
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏
            if self.is_module_available("thought_tree"):
                try:
                    active_thoughts = len([t for t in self.thought_tree.thoughts.values() 
                                         if hasattr(t, 'status') and t.status.value == "active"])
                    status["active_thoughts"] = active_thoughts
                    status["focused_thought"] = self.thought_tree.current_focus
                except:
                    status["active_thoughts"] = "unknown"
                    status["focused_thought"] = None
            
            return status
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
            return {
                "agent_name": self.agent_name,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}",
                "basic_status": "running" if self.is_running else "stopped"
            } 