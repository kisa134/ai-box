#!/usr/bin/env python3
"""
–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ AIbox –∞–≥–µ–Ω—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
"""

import asyncio
import signal
import sys
import os
import time
import psutil
import GPUtil
from datetime import datetime
from autonomous_agent import AutonomousAgent

class PersistentAgentRunner:
    """–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.agent = None
        self.running = False
        self.consciousness_task = None
        self.monitoring_task = None
        
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        print("ü§ñ AIbox Persistent Agent")
        print("=" * 60)
        
        try:
            # –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
            print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
            self.agent = AutonomousAgent("Persistent AIbox Agent", "agent_data")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")
            self.agent.initialize_modules()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
            print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...")
            self.agent.initialize_agent()
            
            print("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å GPU
            await self._check_gpu_usage()
            
            # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è
            self.running = True
            print("üß† –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è...")
            print("üí° –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")
            print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω.")
            print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            print("-" * 60)
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏
            self.consciousness_task = asyncio.create_task(
                self.agent.run_consciousness_cycle()
            )
            
            self.monitoring_task = asyncio.create_task(
                self._monitor_system()
            )
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await asyncio.gather(
                self.consciousness_task,
                self.monitoring_task,
                return_exceptions=True
            )
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    
    async def _check_gpu_usage(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU"""
        try:
            gpus = GPUtil.getGPUs()
            if gpus:
                print("üéÆ GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞:")
                for i, gpu in enumerate(gpus):
                    print(f"   GPU {i}: {gpu.name}")
                    print(f"   VRAM: {gpu.memoryUsed}MB / {gpu.memoryTotal}MB")
                    print(f"   –ó–∞–≥—Ä—É–∑–∫–∞: {gpu.load * 100:.1f}%")
                    print(f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {gpu.temperature}¬∞C")
            else:
                print("‚ö†Ô∏è GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}")
    
    async def _monitor_system(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        cycle_count = 0
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
                status = self.agent.get_status_report()
                
                # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã
                cpu_percent = psutil.cpu_percent(interval=1)
                memory = psutil.virtual_memory()
                
                # GPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                gpu_info = ""
                try:
                    gpus = GPUtil.getGPUs()
                    if gpus:
                        gpu = gpus[0]
                        gpu_info = f"GPU: {gpu.memoryUsed}MB/{gpu.memoryTotal}MB ({gpu.load*100:.1f}%)"
                except:
                    gpu_info = "GPU: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                
                # –í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å
                timestamp = datetime.now().strftime("%H:%M:%S")
                cycles = status.get('consciousness_cycles', 0)
                goals = status.get('active_goals', 0)
                memories = status.get('episodes_in_memory', 0)
                thoughts = status.get('active_thoughts', 0)
                
                print(f"[{timestamp}] üß† –¶–∏–∫–ª—ã: {cycles} | üéØ –¶–µ–ª–∏: {goals} | üíæ –ü–∞–º—è—Ç—å: {memories} | üå≥ –ú—ã—Å–ª–∏: {thoughts} | CPU: {cpu_percent:.1f}% | RAM: {memory.percent:.1f}% | {gpu_info}")
                
                cycle_count += 1
                
                # –ö–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if cycle_count % 10 == 0:
                    await self._show_detailed_stats()
                
                await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(5)
    
    async def _show_detailed_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print("-" * 40)
        
        try:
            # –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π
            status = self.agent.get_status_report()
            if 'modules' in status:
                modules = status['modules']
                active_modules = sum(1 for active in modules.values() if active)
                total_modules = len(modules)
                print(f"üîß –ú–æ–¥—É–ª–∏: {active_modules}/{total_modules} –∞–∫—Ç–∏–≤–Ω—ã")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
            if hasattr(self.agent, 'memory'):
                try:
                    episodes = self.agent.memory.get_recent_episodes(1000)
                    print(f"üíæ –≠–ø–∏–∑–æ–¥—ã –≤ –ø–∞–º—è—Ç–∏: {len(episodes)}")
                    
                    # –¢–∏–ø—ã —ç–ø–∏–∑–æ–¥–æ–≤
                    types = {}
                    for episode in episodes:
                        ep_type = episode.get('type', 'unknown')
                        types[ep_type] = types.get(ep_type, 0) + 1
                    
                    if types:
                        print("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤:")
                        for ep_type, count in types.items():
                            print(f"   {ep_type}: {count}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏: {e}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª—è—Ö
            if hasattr(self.agent, 'goals'):
                try:
                    active_goals = self.agent.goals.get_active_goals()
                    print(f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π: {len(active_goals)}")
                    
                    for goal in active_goals[:3]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3
                        print(f"   - {goal.description} (–ø—Ä–æ–≥—Ä–µ—Å—Å: {goal.progress:.1f}%)")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ–π: {e}")
            
            print("-" * 40)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"""
        self.running = False
        print("\nüõë –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
        
        if self.consciousness_task:
            self.consciousness_task.cancel()
        
        if self.monitoring_task:
            self.monitoring_task.cancel()
        
        if self.agent:
            self.agent.stop()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    runner = PersistentAgentRunner()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        print(f"\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        runner.stop()
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await runner.start()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        print("‚úÖ –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ AIbox –∞–≥–µ–Ω—Ç–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Ollama
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama...")
    try:
        import subprocess
        result = subprocess.run(['ollama', 'list'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω")
            lines = result.stdout.strip().split('\n')[1:]
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len([l for l in lines if l.strip()])}")
        else:
            print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama: {e}")
    
    print("\nüéØ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞...")
    asyncio.run(main()) 