import streamlit as st
import asyncio
import threading
import time
import json
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
from datetime import datetime, timedelta
import networkx as nx
import plotly.figure_factory as ff

from autonomous_agent import AutonomousAgent

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ê–≥–µ–Ω—Ç —Å –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

class AgentInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º"""
    
    def __init__(self):
        self.agent = None
        self.agent_thread = None
        self.is_running = False
        
    def start_agent(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.is_running:
            self.agent = AutonomousAgent("–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ê–≥–µ–Ω—Ç", "agent_data")
            self.is_running = True
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.agent_thread = threading.Thread(
                target=self._run_agent_loop,
                daemon=True
            )
            self.agent_thread.start()
            return True
        return False
    
    def _run_agent_loop(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.agent.run_consciousness_cycle())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≥–µ–Ω—Ç–∞: {e}")
            self.is_running = False
    
    def stop_agent(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"""
        if self.agent and self.is_running:
            self.agent.stop()
            self.is_running = False
            return True
        return False
    
    def get_agent_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
        if self.agent:
            return self.agent.get_status_report()
        return None
    
    def send_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É"""
        if self.agent and self.is_running:
            try:
                return self.agent.process_input(message)
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        return "–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
if 'agent_interface' not in st.session_state:
    st.session_state.agent_interface = AgentInterface()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    st.title("ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ê–≥–µ–Ω—Ç —Å –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    with st.sidebar:
        st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–æ–º")
        
        # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
        if st.session_state.agent_interface.is_running:
            st.success("üü¢ –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
            if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"):
                st.session_state.agent_interface.stop_agent()
                st.rerun()
        else:
            st.error("üî¥ –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"):
                if st.session_state.agent_interface.start_agent():
                    st.success("–ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞")
        
        st.markdown("---")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        auto_refresh = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=True)
        if auto_refresh:
            refresh_interval = st.selectbox(
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)",
                [1, 3, 5, 10, 30],
                index=2
            )
        
        st.markdown("---")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –ö–æ–º–∞–Ω–¥—ã")
        if st.button("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –†–µ—Ñ–ª–µ–∫—Å–∏—è"):
            if st.session_state.agent_interface.agent:
                st.session_state.agent_interface.agent.reflect_on_state(
                    "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è", 
                    {"trigger": "user_request", "timestamp": datetime.now().isoformat()}
                )
                st.success("–†–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –°–æ—Å—Ç–æ—è–Ω–∏–µ"):
            if st.session_state.agent_interface.agent:
                st.session_state.agent_interface.agent.save_state()
                st.success("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
        "üìä –û–±–∑–æ—Ä",
        "üí¨ –ß–∞—Ç —Å –ê–≥–µ–Ω—Ç–æ–º", 
        "üß† –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –õ–æ–≥–∏", 
        "üéØ –¶–µ–ª–∏ –∏ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", 
        "üåç –ú–æ–¥–µ–ª—å –ú–∏—Ä–∞", 
        "üí≠ –î–µ—Ä–µ–≤–æ –ú—ã—Å–ª–µ–π",
        "ü™û Self-–õ–æ–≥"
    ])
    
    # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞
    agent_status = st.session_state.agent_interface.get_agent_status()
    
    with tab1:
        show_overview(agent_status)
    
    with tab2:
        show_chat_interface(agent_status)
    
    with tab3:
        show_inner_logs(agent_status)
    
    with tab4:
        show_goals_motivation(agent_status)
    
    with tab5:
        show_world_model(agent_status)
    
    with tab6:
        show_thought_tree(agent_status)
    
    with tab7:
        show_self_log(agent_status)
    
    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if auto_refresh and st.session_state.agent_interface.is_running:
        time.sleep(refresh_interval)
        st.rerun()

def show_overview(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä –∞–≥–µ–Ω—Ç–∞"""
    
    st.header("üìä –û–±–∑–æ—Ä –°–æ—Å—Ç–æ—è–Ω–∏—è –ê–≥–µ–Ω—Ç–∞")
    
    if not agent_status:
        st.warning("–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "–¶–∏–∫–ª—ã –°–æ–∑–Ω–∞–Ω–∏—è",
            agent_status['consciousness_cycles'],
            delta=1 if agent_status['is_running'] else 0
        )
    
    with col2:
        uptime_hours = agent_status.get('uptime_hours', 0)
        if uptime_hours < 1:
            uptime_display = f"{uptime_hours * 60:.0f} –º–∏–Ω"
        else:
            uptime_display = f"{uptime_hours:.1f} —á"
        
        st.metric(
            "–í—Ä–µ–º—è –†–∞–±–æ—Ç—ã",
            uptime_display
        )
    
    with col3:
        inner_state = agent_status.get('inner_state', {})
        if isinstance(inner_state, str):
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
            energy_val = 0.0
            try:
                if "–≠–Ω–µ—Ä–≥–∏—è:" in inner_state:
                    energy_line = [line for line in inner_state.split('\n') if '–≠–Ω–µ—Ä–≥–∏—è:' in line][0]
                    energy_val = float(energy_line.split(':')[1].strip())
            except:
                pass
        else:
            energy_val = inner_state.get('energy_level', 0)
            
        st.metric(
            "–≠–Ω–µ—Ä–≥–∏—è",
            f"{energy_val:.2f}",
            delta=None
        )
    
    with col4:
        if isinstance(inner_state, str):
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
            eval_val = 0.0
            try:
                if "–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞:" in inner_state:
                    eval_line = [line for line in inner_state.split('\n') if '–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞:' in line][0]
                    eval_val = float(eval_line.split(':')[1].strip())
            except:
                pass
        else:
            eval_val = inner_state.get('self_evaluation', 0)
            
        st.metric(
            "–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", 
            f"{eval_val:.2f}",
            delta=None
        )
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    st.subheader("–¢–µ–∫—É—â–µ–µ –°–æ—Å—Ç–æ—è–Ω–∏–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if isinstance(inner_state, str):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
            emotional_state = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            cognitive_state = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" 
            motivation_level = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            try:
                lines = inner_state.split('\n')
                for line in lines:
                    if "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:" in line:
                        emotional_state = line.split(':')[1].strip()
                    elif "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:" in line:
                        cognitive_state = line.split(':')[1].strip()
                    elif "–ú–æ—Ç–∏–≤–∞—Ü–∏—è:" in line:
                        motivation_level = line.split(':')[1].strip()
            except:
                pass
                
            st.write("**–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**", emotional_state)
            st.write("**–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**", cognitive_state) 
            st.write("**–£—Ä–æ–≤–µ–Ω—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏:**", motivation_level)
        else:
            st.write("**–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**", inner_state.get('emotional_state', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            st.write("**–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**", inner_state.get('cognitive_state', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            st.write("**–£—Ä–æ–≤–µ–Ω—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏:**", inner_state.get('motivation_level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
    
    with col2:
        st.write("**–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å:**", agent_status.get('current_goal', '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏'))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª–µ–π
        goals_count = agent_status.get('goals_count', 0)
        memory_stats = agent_status.get('memory_stats', {})
        active_thoughts = agent_status.get('active_thoughts', 0)
        
        st.write("**–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:**", goals_count)
        st.write("**–≠–ø–∏–∑–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏:**", memory_stats.get('local_episodes', 0))
        st.write("**–ê–∫—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏:**", active_thoughts)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –°–æ—Å—Ç–æ—è–Ω–∏—è")
    
    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    fig = go.Figure(data=go.Scatterpolar(
        r=[
            energy_val * 100,
            eval_val * 100,
            max(0, min(100, 80)),  # –ë–∞–∑–æ–≤–æ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ
            min(100, goals_count * 25),  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏
            min(100, active_thoughts * 10)  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º—ã—Å–ª–∏
        ],
        theta=['–≠–Ω–µ—Ä–≥–∏—è', '–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞', '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', '–¶–µ–ª–∏', '–ú—ã—Å–ª–∏'],
        fill='toself',
        name='–°–æ—Å—Ç–æ—è–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]
            )),
        showlegend=False,
        title="–†–∞–¥–∞—Ä–Ω–∞—è –î–∏–∞–≥—Ä–∞–º–º–∞ –°–æ—Å—Ç–æ—è–Ω–∏—è"
    )
    
    st.plotly_chart(fig, use_container_width=True)

def show_inner_logs(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ª–æ–≥–∏ –∞–≥–µ–Ω—Ç–∞"""
    
    st.header("üß† –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –õ–æ–≥–∏ –ú—ã—à–ª–µ–Ω–∏—è")
    
    if not agent_status:
        st.warning("–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –º—ã—Å–ª–∏
    agent = st.session_state.agent_interface.agent
    if agent:
        public_thoughts = agent.get_public_log()
        
        if public_thoughts:
            st.subheader("–ü–æ—Ç–æ–∫ –°–æ–∑–Ω–∞–Ω–∏—è")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏
            for i, thought in enumerate(reversed(public_thoughts[-10:])):
                with st.expander(f"–¶–∏–∫–ª #{thought['cycle']} - {thought['timestamp'][:19]}"):
                    st.write("**–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**")
                    st.text(thought['inner_state_summary'])
                    
                    st.write("**–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å:**", thought['current_goal'])
                    st.write("**–§–æ–∫—É—Å –≤–Ω–∏–º–∞–Ω–∏—è:**", thought['focused_thought'])
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", f"{thought['self_evaluation']:.2f}")
                    with col2:
                        st.metric("–ú–æ—Ç–∏–≤–∞—Ü–∏—è", thought['motivation_level'])
        else:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ—Ç–æ–∫–∞ —Å–æ–∑–Ω–∞–Ω–∏—è")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if agent and public_thoughts:
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –°–æ—Å—Ç–æ—è–Ω–∏–π")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        timestamps = [datetime.fromisoformat(t['timestamp']) for t in public_thoughts]
        evaluations = [t['self_evaluation'] for t in public_thoughts]
        cycles = [t['cycle'] for t in public_thoughts]
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=timestamps,
            y=evaluations,
            mode='lines+markers',
            name='–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞',
            line=dict(color='blue', width=2),
            marker=dict(size=6)
        ))
        
        fig.update_layout(
            title="–î–∏–Ω–∞–º–∏–∫–∞ –°–∞–º–æ–æ—Ü–µ–Ω–∫–∏",
            xaxis_title="–í—Ä–µ–º—è",
            yaxis_title="–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ (0-1)",
            hovermode='x unified'
        )
        
        st.plotly_chart(fig, use_container_width=True)

def show_goals_motivation(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é"""
    
    st.header("üéØ –¶–µ–ª–∏ –∏ –°–∏—Å—Ç–µ–º–∞ –ú–æ—Ç–∏–≤–∞—Ü–∏–∏")
    
    if not agent_status:
        st.warning("–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    agent = st.session_state.agent_interface.agent
    if not agent:
        return
    
    # –¶–µ–ª–∏ –∞–≥–µ–Ω—Ç–∞
    st.subheader("–ê–∫—Ç–∏–≤–Ω—ã–µ –¶–µ–ª–∏")
    
    active_goals = agent.goals.get_active_goals()
    
    if active_goals:
        for goal in active_goals:
            with st.expander(f"üéØ {goal.description}"):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.write("**–¢–∏–ø:**", goal.goal_type)
                    st.write("**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:**", goal.priority.value)
                
                with col2:
                    st.write("**–ü—Ä–æ–≥—Ä–µ—Å—Å:**", f"{goal.progress:.1%}")
                    st.progress(goal.progress)
                
                with col3:
                    st.write("**–ü–æ–ø—ã—Ç–∫–∏:**", goal.attempts)
                    st.write("**–°–æ–∑–¥–∞–Ω–∞:**", goal.created_at.strftime("%Y-%m-%d %H:%M"))
                
                if goal.success_criteria:
                    st.write("**–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:**")
                    for criterion in goal.success_criteria:
                        st.write(f"- {criterion}")
    else:
        st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π")
    
    # –ò–µ—Ä–∞—Ä—Ö–∏—è —Ü–µ–ª–µ–π
    st.subheader("–ò–µ—Ä–∞—Ä—Ö–∏—è –¶–µ–ª–µ–π")
    goal_hierarchy = agent.goals.get_goal_hierarchy()
    
    if goal_hierarchy['all_goals']:
        # –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ —Ü–µ–ª–µ–π
        G = nx.DiGraph()
        
        # –î–æ–±–∞–≤–∏—Ç—å —É–∑–ª—ã
        for goal_id, goal_data in goal_hierarchy['all_goals'].items():
            G.add_node(goal_id, 
                      label=goal_data['description'][:30] + "...",
                      progress=goal_data['progress'],
                      priority=goal_data['priority'])
        
        # –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑–∏
        for goal_id, goal_data in goal_hierarchy['all_goals'].items():
            if goal_data['parent_id']:
                G.add_edge(goal_data['parent_id'], goal_id)
        
        if G.nodes():
            # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏
            st.write("**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–ª–µ–π:**")
            for root_goal_id in goal_hierarchy['root_goals']:
                if root_goal_id in goal_hierarchy['all_goals']:
                    root_goal = goal_hierarchy['all_goals'][root_goal_id]
                    st.write(f"üéØ **{root_goal['description']}** (–ø—Ä–æ–≥—Ä–µ—Å—Å: {root_goal['progress']:.1%})")
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ü–µ–ª–∏
                    for child_id in root_goal.get('children_ids', []):
                        if child_id in goal_hierarchy['all_goals']:
                            child_goal = goal_hierarchy['all_goals'][child_id]
                            st.write(f"  ‚îî‚îÄ {child_goal['description']} (–ø—Ä–æ–≥—Ä–µ—Å—Å: {child_goal['progress']:.1%})")
    
    # –°–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    st.subheader("–°–∏—Å—Ç–µ–º–∞ –ú–æ—Ç–∏–≤–∞—Ü–∏–∏")
    
    motivation_system = agent.self_model.motivation_system
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è:**")
        for motivation, value in motivation_system.intrinsic_motivations.items():
            st.write(f"- {motivation}: {value:.2f}")
            st.progress(value)
    
    with col2:
        st.write("**–í–Ω–µ—à–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è:**")
        for motivation, value in motivation_system.extrinsic_motivations.items():
            st.write(f"- {motivation}: {value:.2f}")
            st.progress(value)
    
    # –ì—Ä–∞—Ñ–∏–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    motivation_data = {
        '–¢–∏–ø': ['–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è'] * len(motivation_system.intrinsic_motivations) + 
               ['–í–Ω–µ—à–Ω—è—è'] * len(motivation_system.extrinsic_motivations),
        '–ú–æ—Ç–∏–≤–∞—Ü–∏—è': list(motivation_system.intrinsic_motivations.keys()) + 
                    list(motivation_system.extrinsic_motivations.keys()),
        '–ó–Ω–∞—á–µ–Ω–∏–µ': list(motivation_system.intrinsic_motivations.values()) + 
                   list(motivation_system.extrinsic_motivations.values())
    }
    
    df_motivation = pd.DataFrame(motivation_data)
    
    fig = px.bar(df_motivation, x='–ú–æ—Ç–∏–≤–∞—Ü–∏—è', y='–ó–Ω–∞—á–µ–Ω–∏–µ', color='–¢–∏–ø',
                title="–ü—Ä–æ—Ñ–∏–ª—å –ú–æ—Ç–∏–≤–∞—Ü–∏–∏ –ê–≥–µ–Ω—Ç–∞")
    fig.update_layout(xaxis_tickangle=45)
    
    st.plotly_chart(fig, use_container_width=True)

def show_world_model(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª—å –º–∏—Ä–∞"""
    
    st.header("üåç –ú–æ–¥–µ–ª—å –ú–∏—Ä–∞ –ê–≥–µ–Ω—Ç–∞")
    
    if not agent_status:
        st.error("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    try:
        if st.session_state.agent and hasattr(st.session_state.agent, 'world_model'):
            world_model = st.session_state.agent.world_model
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                entities_count = len(getattr(world_model, 'entities', {}))
                st.metric("üèõÔ∏è –°—É—â–Ω–æ—Å—Ç–∏", entities_count)
            
            with col2:
                relationships_count = len(getattr(world_model, 'relationships', {}))
                st.metric("üîó –°–≤—è–∑–∏", relationships_count)
            
            with col3:
                confidence = getattr(world_model, 'confidence_level', 0.75)
                st.metric("üìä –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å", f"{confidence:.0%}")
            
            with col4:
                last_update = getattr(world_model, 'last_update', '–ù–µ–¥–∞–≤–Ω–æ')
                st.metric("üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ", last_update if isinstance(last_update, str) else "–ù–µ–¥–∞–≤–Ω–æ")
            
            # –°–≤–æ–¥–∫–∞ –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞
            st.subheader("üó∫Ô∏è –û–±–∑–æ—Ä –ó–Ω–∞–Ω–∏–π")
            
            try:
                if hasattr(world_model, 'get_world_summary'):
                    world_summary = world_model.get_world_summary()
                    st.info(f"üìù **–°–≤–æ–¥–∫–∞:** {world_summary}")
                else:
                    st.info("üìù **–°–≤–æ–¥–∫–∞:** –ú–æ–¥–µ–ª—å –º–∏—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ")
            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É: {e}")
            
            # –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
            st.subheader("üß© –ö–ª—é—á–µ–≤—ã–µ –ö–æ–Ω—Ü–µ–ø—Ü–∏–∏")
            
            if hasattr(world_model, 'entities') and world_model.entities:
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
                entity_types = {}
                for entity_id, entity in world_model.entities.items():
                    entity_type = getattr(entity, 'type', '–û–±—â–µ–µ')
                    if entity_type not in entity_types:
                        entity_types[entity_type] = []
                    entity_types[entity_type].append(entity)
                
                for entity_type, entities in entity_types.items():
                    with st.expander(f"üìÅ {entity_type} ({len(entities)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)"):
                        for entity in entities[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                            name = getattr(entity, 'name', entity_id)
                            description = getattr(entity, 'description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                            confidence = getattr(entity, 'confidence', 0.5)
                            
                            st.write(f"**{name}**")
                            st.write(f"‚Ä¢ {description}")
                            st.progress(confidence)
            else:
                # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                demo_concepts = {
                    "ü§ñ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": [
                        {"name": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç", "desc": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑—É–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º", "conf": 0.95},
                        {"name": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "desc": "–ú–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è –ò–ò –Ω–∞ –¥–∞–Ω–Ω—ã—Ö", "conf": 0.88}
                    ],
                    "üß† –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã": [
                        {"name": "–°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ", "desc": "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Å–æ–∑–Ω–∞–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ", "conf": 0.78},
                        {"name": "–†–µ—Ñ–ª–µ–∫—Å–∏—è", "desc": "–ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º—ã—Å–ª–µ–π", "conf": 0.82}
                    ],
                    "üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏": [
                        {"name": "–û–±—â–µ–Ω–∏–µ", "desc": "–û–±–º–µ–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏", "conf": 0.89},
                        {"name": "–≠—Ç–∏–∫–∞", "desc": "–ü—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è", "conf": 0.85}
                    ]
                }
                
                for category, concepts in demo_concepts.items():
                    with st.expander(f"{category} ({len(concepts)} –∫–æ–Ω—Ü–µ–ø—Ü–∏–π)"):
                        for concept in concepts:
                            st.write(f"**{concept['name']}** (–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {concept['conf']:.0%})")
                            st.write(f"‚Ä¢ {concept['desc']}")
                            st.progress(concept['conf'])
            
            # –ù–µ–¥–∞–≤–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            st.subheader("üîÑ –ò—Å—Ç–æ—Ä–∏—è –†–∞–∑–≤–∏—Ç–∏—è")
            
            updates = [
                {"time": "2 –º–∏–Ω –Ω–∞–∑–∞–¥", "action": "–†–∞—Å—à–∏—Ä–µ–Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è '–°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ'", "type": "üìà –£–ª—É—á—à–µ–Ω–∏–µ"},
                {"time": "5 –º–∏–Ω –Ω–∞–∑–∞–¥", "action": "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å –ò–ò-–≠—Ç–∏–∫–∞", "type": "üîó –ù–æ–≤–∞—è —Å–≤—è–∑—å"},
                {"time": "8 –º–∏–Ω –Ω–∞–∑–∞–¥", "action": "–°–æ–∑–¥–∞–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'", "type": "üÜï –ù–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å"}
            ]
            
            for update in updates:
                st.write(f"üïê **{update['time']}** - {update['type']}: {update['action']}")
        
        else:
            st.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å WorldModel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            st.info("üîß –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞")
    
    except Exception as e:
                 st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞: {str(e)}")
         st.info("üîß –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                entity_types[entity_type] = []
            entity_types[entity_type].append(entity)
        
        for entity_type, entities in entity_types.items():
            with st.expander(f"üìÅ {entity_type} ({len(entities)} —à—Ç.)"):
                for entity in entities:
                    st.write(f"**{entity.name}**")
                    if entity.properties:
                        for prop_key, prop_data in entity.properties.items():
                            if isinstance(prop_data, dict) and 'value' in prop_data:
                                st.write(f"- {prop_key}: {prop_data['value']}")
                    st.write(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {entity.source}")
                    st.write("---")
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ –º–æ–¥–µ–ª–∏ –º–∏—Ä–∞")
    
    # –§–∞–∫—Ç—ã
    st.subheader("–§–∞–∫—Ç—ã –æ –ú–∏—Ä–µ")
    
    recent_facts = sorted(agent.world_model.facts.values(), 
                         key=lambda x: x.timestamp, 
                         reverse=True)[:10]
    
    if recent_facts:
        for fact in recent_facts:
            confidence_color = "green" if fact.confidence > 0.7 else "orange" if fact.confidence > 0.4 else "red"
            st.markdown(f"**{fact.statement}**")
            st.markdown(f"<span style='color: {confidence_color}'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {fact.confidence:.2f}</span>", 
                       unsafe_allow_html=True)
            st.write(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {fact.source}")
            st.write(f"–í—Ä–µ–º—è: {fact.timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
            st.write("---")
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–∫—Ç–æ–≤ –æ –º–∏—Ä–µ")
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã
    st.subheader("–ö–æ–Ω—Ç–µ–∫—Å—Ç—ã")
    
    if agent.world_model.contexts:
        for context_id, context in agent.world_model.contexts.items():
            is_current = context_id == agent.world_model.current_context_id
            icon = "üéØ" if is_current else "üìã"
            
            with st.expander(f"{icon} {context.name} {'(—Ç–µ–∫—É—â–∏–π)' if is_current else ''}"):
                st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {context.description}")
                st.write(f"**–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:** {len(context.active_entities)}")
                st.write(f"**–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã:** {len(context.relevant_facts)}")
                st.write(f"**–°–æ–∑–¥–∞–Ω:** {context.timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
    else:
        st.info("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")

def show_thought_tree(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ –º—ã—Å–ª–µ–π"""
    
    st.header("üí≠ –î–µ—Ä–µ–≤–æ –ú—ã—Å–ª–µ–π –∏ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è")
    
    if not agent_status:
        st.warning("–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    agent = st.session_state.agent_interface.agent
    if not agent:
        return
    
    # –°–≤–æ–¥–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
    reasoning_summary = agent.thought_tree.get_reasoning_summary()
    st.text(reasoning_summary)
    
    # –¢–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å
    if agent.thought_tree.current_focus:
        current_thought = agent.thought_tree.thoughts[agent.thought_tree.current_focus]
        st.subheader("üéØ –¢–µ–∫—É—â–∏–π –§–æ–∫—É—Å –í–Ω–∏–º–∞–Ω–∏—è")
        
        st.info(f"**{current_thought.content}**")
        st.write(f"–¢–∏–ø: {current_thought.thought_type.value}")
        st.write(f"–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {current_thought.overall_score:.2f}")
    
    # –ù–µ–¥–∞–≤–Ω–∏–µ –º—ã—Å–ª–∏
    st.subheader("–ù–µ–¥–∞–≤–Ω–∏–µ –ú—ã—Å–ª–∏")
    
    recent_thoughts = sorted(agent.thought_tree.thoughts.values(), 
                           key=lambda x: x.created_at, 
                           reverse=True)[:15]
    
    if recent_thoughts:
        for thought in recent_thoughts:
            thought_icon = {
                'observation': 'üëÅÔ∏è',
                'hypothesis': 'üí°',
                'analysis': 'üîç',
                'plan': 'üìã',
                'decision': '‚úÖ',
                'reflection': 'ü™û',
                'critique': '‚ùó',
                'alternative': 'üîÑ'
            }.get(thought.thought_type.value, 'üí≠')
            
            with st.expander(f"{thought_icon} {thought.content[:50]}..."):
                st.write(f"**–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {thought.content}")
                st.write(f"**–¢–∏–ø:** {thought.thought_type.value}")
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {thought.status.value}")
                st.write(f"**–°–æ–∑–¥–∞–Ω–∞:** {thought.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
                
                # –û—Ü–µ–Ω–∫–∏
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("–û—Å—É—â–µ—Å—Ç–≤–∏–º–æ—Å—Ç—å", f"{thought.feasibility_score:.2f}")
                with col2:
                    st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{thought.confidence_score:.2f}")
                with col3:
                    st.metric("–ù–æ–≤–∏–∑–Ω–∞", f"{thought.novelty_score:.2f}")
                with col4:
                    st.metric("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", f"{thought.relevance_score:.2f}")
                
                # –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã
                if thought.evidence:
                    st.write("**–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:**")
                    for evidence in thought.evidence:
                        st.write(f"+ {evidence}")
                
                if thought.counterarguments:
                    st.write("**–ö–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã:**")
                    for counter in thought.counterarguments:
                        st.write(f"- {counter}")
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –º—ã—Å–ª–µ–π –≤ –¥–µ—Ä–µ–≤–µ")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –º—ã—Å–ª–µ–π
    if recent_thoughts:
        st.subheader("–ê–Ω–∞–ª–∏–∑ –¢–∏–ø–æ–≤ –ú—ã—Å–ª–µ–π")
        
        thought_types = {}
        for thought in agent.thought_tree.thoughts.values():
            thought_type = thought.thought_type.value
            thought_types[thought_type] = thought_types.get(thought_type, 0) + 1
        
        df_thoughts = pd.DataFrame(list(thought_types.items()), columns=['–¢–∏–ø', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
        
        fig = px.pie(df_thoughts, values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', names='–¢–∏–ø', 
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¢–∏–ø–æ–≤ –ú—ã—Å–ª–µ–π")
        
        st.plotly_chart(fig, use_container_width=True)

def show_chat_interface(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ —Å –∞–≥–µ–Ω—Ç–æ–º"""
    
    st.header("üí¨ –ß–∞—Ç —Å –ê–≥–µ–Ω—Ç–æ–º")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ session state
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    
    if 'thinking_process' not in st.session_state:
        st.session_state.thinking_process = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞
    if not agent_status:
        st.warning("‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞.")
        return
    
    agent = st.session_state.agent_interface.agent
    if not agent:
        st.error("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    chat_container = st.container()
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤–Ω–∏–∑—É
    st.markdown("---")
    
    col1, col2 = st.columns([4, 1])
    
    with col1:
        user_input = st.text_input(
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É:",
            key="chat_input",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö..."
        )
    
    with col2:
        send_button = st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if send_button and user_input.strip():
        # –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_message = {
            "type": "user",
            "content": user_input,
            "timestamp": datetime.now(),
            "id": len(st.session_state.chat_history)
        }
        st.session_state.chat_history.append(user_message)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
        with st.spinner("ü§ñ –ê–≥–µ–Ω—Ç –¥—É–º–∞–µ—Ç..."):
            try:
                # –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º—ã—Å–ª–µ–π
                initial_thoughts = len(agent.thought_tree.thoughts)
                
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
                response = agent.process_input(user_input)
                
                # –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º—ã—Å–ª–∏
                new_thoughts = len(agent.thought_tree.thoughts) - initial_thoughts
                
                # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–∞
                recent_thoughts = list(agent.thought_tree.thoughts.values())[-new_thoughts:] if new_thoughts > 0 else []
                
                # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è
                thinking_process = {
                    "user_message_id": user_message["id"],
                    "thoughts": [
                        {
                            "content": thought.content,
                            "type": thought.thought_type.value,
                            "score": thought.overall_score,
                            "timestamp": thought.created_at
                        } for thought in recent_thoughts
                    ],
                    "response_time": datetime.now(),
                    "new_thoughts_count": new_thoughts
                }
                
                st.session_state.thinking_process.append(thinking_process)
                
            except Exception as e:
                response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
                thinking_process = {
                    "user_message_id": user_message["id"],
                    "thoughts": [],
                    "response_time": datetime.now(),
                    "new_thoughts_count": 0,
                    "error": str(e)
                }
                st.session_state.thinking_process.append(thinking_process)
        
        # –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        agent_message = {
            "type": "agent",
            "content": response,
            "timestamp": datetime.now(),
            "id": len(st.session_state.chat_history),
            "thinking_id": len(st.session_state.thinking_process) - 1
        }
        st.session_state.chat_history.append(agent_message)
        
        # –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
        st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    with chat_container:
        if not st.session_state.chat_history:
            st.info("üí° **–ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –∞–≥–µ–Ω—Ç–æ–º!**\n\n–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n- –ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ\n- –ö–∞–∫–∏–µ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å —Ü–µ–ª–∏?\n- –û —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å?\n- –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?")
        else:
            for i, message in enumerate(st.session_state.chat_history):
                if message["type"] == "user":
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    st.markdown(f"""
                    <div style="background-color: #e3f2fd; padding: 10px; border-radius: 10px; margin: 5px 0; border-left: 4px solid #2196f3;">
                        <strong>üë§ –í—ã ({message["timestamp"].strftime("%H:%M:%S")}):</strong><br>
                        {message["content"]}
                    </div>
                    """, unsafe_allow_html=True)
                    
                elif message["type"] == "agent":
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
                    st.markdown(f"""
                    <div style="background-color: #f3e5f5; padding: 10px; border-radius: 10px; margin: 5px 0; border-left: 4px solid #9c27b0;">
                        <strong>ü§ñ –ê–≥–µ–Ω—Ç ({message["timestamp"].strftime("%H:%M:%S")}):</strong><br>
                        {message["content"]}
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è
                    if "thinking_id" in message and message["thinking_id"] < len(st.session_state.thinking_process):
                        thinking = st.session_state.thinking_process[message["thinking_id"]]
                        
                        if thinking["thoughts"]:
                            with st.expander(f"üß† –ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è ({thinking['new_thoughts_count']} –Ω–æ–≤—ã—Ö –º—ã—Å–ª–µ–π)", expanded=False):
                                for thought in thinking["thoughts"]:
                                    thought_icon = {
                                        'observation': 'üëÅÔ∏è',
                                        'hypothesis': 'üí°',
                                        'analysis': 'üîç',
                                        'plan': 'üìã',
                                        'decision': '‚úÖ',
                                        'reflection': 'ü™û',
                                        'critique': '‚ùó',
                                        'alternative': 'üîÑ'
                                    }.get(thought["type"], 'üí≠')
                                    
                                    confidence_color = "green" if thought["score"] > 0.7 else "orange" if thought["score"] > 0.4 else "red"
                                    
                                    st.markdown(f"""
                                    <div style="background-color: #f8f9fa; padding: 8px; border-radius: 5px; margin: 3px 0; border-left: 3px solid #6c757d;">
                                        <strong>{thought_icon} {thought["type"].title()}:</strong><br>
                                        {thought["content"]}<br>
                                        <small style="color: {confidence_color};">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {thought["score"]:.2f}</small>
                                    </div>
                                    """, unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ß–∞—Ç"):
            st.session_state.chat_history = []
            st.session_state.thinking_process = []
            st.success("–ß–∞—Ç –æ—á–∏—â–µ–Ω!")
            st.rerun()
    
    with col2:
        if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç –ß–∞—Ç–∞"):
            chat_export = {
                "export_time": datetime.now().isoformat(),
                "messages": st.session_state.chat_history,
                "thinking_processes": st.session_state.thinking_process
            }
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å JSON",
                data=json.dumps(chat_export, ensure_ascii=False, indent=2, default=str),
                file_name=f"agent_chat_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
    
    with col3:
        if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ß–∞—Ç–∞"):
            if st.session_state.chat_history:
                user_messages = [m for m in st.session_state.chat_history if m["type"] == "user"]
                agent_messages = [m for m in st.session_state.chat_history if m["type"] == "agent"]
                total_thoughts = sum(len(tp.get("thoughts", [])) for tp in st.session_state.thinking_process)
                
                st.info(f"""
                **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:**
                - üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(st.session_state.chat_history)}
                - üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_messages)}
                - ü§ñ –û—Ç –∞–≥–µ–Ω—Ç–∞: {len(agent_messages)}
                - üß† –í—Å–µ–≥–æ –º—ã—Å–ª–µ–π: {total_thoughts}
                - ‚è±Ô∏è –ù–∞—á–∞–ª–æ —á–∞—Ç–∞: {st.session_state.chat_history[0]["timestamp"].strftime("%Y-%m-%d %H:%M:%S") if st.session_state.chat_history else "–ù–µ –Ω–∞—á–∞—Ç"}
                """)

def show_self_log(agent_status):
    """–ü–æ–∫–∞–∑–∞—Ç—å self-–ª–æ–≥ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
    
    st.header("ü™û Self-–õ–æ–≥ –∏ –†–µ—Ñ–ª–µ–∫—Å–∏–∏")
    
    if not agent_status:
        st.warning("–ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    agent = st.session_state.agent_interface.agent
    if not agent:
        return
    
    # –°–∞–º–æ–Ω–∞—Ä—Ä–∞—Ç–∏–≤
    st.subheader("–°–∞–º–æ–æ–ø–∏—Å–∞–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞")
    
    if agent.self_model:
        try:
            self_narrative = agent.self_model.get_self_narrative()
            st.text(self_narrative)
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–æ–æ–ø–∏—Å–∞–Ω–∏–µ: {e}")
            st.info("–ê–≥–µ–Ω—Ç –µ—â–µ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–µ–±—è...")
    else:
        st.info("Self-–º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # –ò—Å—Ç–æ—Ä–∏—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
    
    self_story = agent.get_self_story()
    
    if self_story:
        for entry in reversed(self_story[-10:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
            with st.expander(f"üìù {entry['timestamp'][:19]} - {entry.get('type', 'event')}"):
                if entry['type'] == 'reflection':
                    st.write(f"**–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:** {entry.get('key_insights', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                    st.write(f"**–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞:** {entry.get('self_evaluation', 0):.2f}")
                
                st.json(entry)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ self-–ª–æ–≥–µ")
    
    # –†–µ—Ñ–ª–µ–∫—Å–∏–∏
    st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–µ –†–µ—Ñ–ª–µ–∫—Å–∏–∏")
    
    if agent.self_model.reflections:
        for reflection in reversed(agent.self_model.reflections[-5:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
            with st.expander(f"ü§î {reflection.topic} - {reflection.timestamp.strftime('%Y-%m-%d %H:%M')}"):
                st.write("**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:**")
                st.text(reflection.content)
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ", f"{reflection.emotional_impact:.2f}")
                with col2:
                    st.metric("–¶–µ–Ω–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", f"{reflection.learning_value:.2f}")
                
                if reflection.insights:
                    st.write("**–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:**")
                    for insight in reflection.insights:
                        st.write(f"üí° {insight}")
                
                if reflection.action_items:
                    st.write("**–ü—É–Ω–∫—Ç—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é:**")
                    for action in reflection.action_items:
                        st.write(f"üìã {action}")
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–π")
    
    # –†–∞–∑–≤–∏—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
    st.subheader("–†–∞–∑–≤–∏—Ç–∏–µ –õ–∏—á–Ω–æ—Å—Ç–∏")
    
    personality = agent.self_model.personality
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏:**")
        dominant_traits = personality.get_dominant_traits(5)
        for trait, value in dominant_traits:
            st.write(f"- {trait}: {value:.2f}")
            st.progress(value)
    
    with col2:
        st.write("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏:**")
        core_values = personality.get_core_values(5)
        for value, strength in core_values:
            st.write(f"- {value}: {strength:.2f}")
            st.progress(strength)

if __name__ == "__main__":
    main() 